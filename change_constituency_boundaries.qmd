---
title: "Changing boundaries - Model 1"
author: "Kevin Horan"
execute: 
  echo: false
  warning: false
  message: false
  code-fold: false
  cache: true
toc: true
number-sections: true
format:
  pdf: default
editor: source
bibliography: references.bib
---

```{r, warning=FALSE, message=FALSE}

# install.packages("devtools")
# devtools::install_github("m-clark/gammit")

packages <- c(
  "MASS",
  "tidyverse",
  "sf",
  "tmap",
  "here",
  "spdep", # areal data
  "grid",
  "GWmodel",
  "kableExtra",
  "cowplot",
  "parlitools",
  "corrplot",
  "lme4",
  "mgcv",
  "ggfortify",
  "ggforce", # has geom_circle
  "gridExtra",
  "car",
  "rgeoda", # for LISA
  "ggpubr",
  "ggrepel",
  "ggpointdensity",
  "ggalt", # for geom_encircle
  "ggsflabel", # has repel labels for sf
  "viridis",
  "spatialreg",
  "rgdal",
  "rgeos",
  "randomForest",
  "broom",
  "patchwork",
  "broom.mixed", # extract tidy output
  "merTools", # with plot functions
  "DiagrammeR", # mermaid
  "gammit" # for pulling out ran and fixed effs
  )


# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
  install.packages(packages[!installed_packages])
}

# Packages loading
invisible(lapply(packages, library, character.only = TRUE))

options(kableExtra.latex.load_packages = TRUE)

tmap_mode("plot")
rm(list=ls())

```

```{r}

# avoid conflict with dplyr and MASS::select
select <- dplyr::select

set.seed(123)

```

```{r, warning=FALSE, message=FALSE}

df <- readRDS(here("data","df_withtext.rds")) |> 
  mutate(degree_educated = degree,
         professionals = industry_professional,
         younger_adults = age_18_to_19 + age_20_to_24 + age_25_to_29 + age_30_to_44,
         english_speaking = english_all,
         single_ethnicity_household = 100 - ethnicity_mixed,
         health_not_good = health_fair + health_bad + health_very_bad,
         deprived = deprived_1 + deprived_2 + deprived_3,
         white = ethnicity_white,
         christian = christian,
         own_home = house_owned,
         no_car = cars_none,
         density = density,
         region = as.character(region),
         region = factor(ifelse(county == "Merseyside", "Merseyside", region)),
         region = factor(region)) |> 
  st_as_sf() |> 
  st_transform(crs=27700)

hex <- west_hex_map
df_hex <- df |> 
  st_drop_geometry() |> 
  inner_join(hex |> select(-"constituency_name"), #  no letter case confusion
             by = c("ons_const_id"="gss_code")) |> 
  st_as_sf()

hex_regions <- df_hex |> 
  group_by(region) |> 
  summarise() |> 
  st_as_sf()

regions <- df |> group_by(region) |> 
  summarise() |> 
  st_as_sf() |> 
  st_transform(crs=27700)


vardf <- data.frame(variable = c("degree_educated",
               "professionals",
               "younger_adults",
               "english_speaking",
               "single_ethnicity_household",
               "deprived",
               "white",
               "christian",
               "own_home",
               "no_car"))

var_justification <- data.frame(
  variable = c("degree_educated",
               "professionals",
               "younger_adults",
               "english_speaking",
               "single_ethnicity_household",
               "deprived",
               "white",
               "christian",
               "own_home",
               "no_car"),
  justification = c(rep("post-industrial / knowledge economy",3),
                    rep("diversity / values / outcomes",5),
                    rep("metropolitan / 'big-city'",2)),
  jcolour = c(rep("navyblue",3),
                    rep("firebrick4",5),
                    rep("darkgreen",2))
)


# scale the variables to better judge relative strength of effects
df_scaled <- df |> 
  st_drop_geometry() |> 
  select(degree_educated,
    professionals,
    younger_adults,
    english_speaking,
    single_ethnicity_household,
    health_not_good,
    white,
    christian,
    own_home,
    no_car) |> 
  scale() |> 
  as.data.frame() |> 
  mutate(con_swing=df$con_swing,
         region=df$region)


df_scaled_sf <- df_scaled |> 
  mutate(constituency_name = df$constituency_name, 
         geometry = df$geometry) |> 
  st_as_sf()

```



## Swing 2017-19

```{r, fig.width=12, fig.height=4}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

nlistreg <- regions %>% st_touches()
names(nlistreg) <- regions$region
df_sc_region <- df_scaled_sf |> 
  st_drop_geometry() |> 
  left_join(regions) |> 
  st_as_sf()

mm1719 <- gam(con_swing ~
               degree_educated +
               younger_adults +
               health_not_good +
               white +
               #no_car +
               s(degree_educated,region, bs="re") +
               s(younger_adults,region, bs="re") +
               s(health_not_good,region, bs="re") +
               s(white,region, bs="re") +
               #s(no_car,region, bs="re") +
               s(region,bs='mrf',xt=list(nb=nlistreg)),
             data=df_sc_region, method="REML")

summary(mm1719)


temp <- tibble(
  degree_educated=rep(1,nrow(df_scaled_sf)),
  younger_adults=rep(1,nrow(df_scaled_sf)),
  health_not_good=rep(1,nrow(df_scaled_sf)),
  white=rep(1,nrow(df_scaled_sf)),
  no_car=rep(1,nrow(df_scaled_sf)),
  region=df_sc_region$region)


mm1719df <- predict(mm1719,newdata = temp,type = "terms", se.fit = TRUE) |> 
  as.data.frame() |> 
  cbind(df |> select(geometry,
                     region)) |> 
  as.data.frame() |> 
  st_as_sf() |> 
  st_transform(crs=27700)

mm1719df_reg <- regions |> 
  left_join(mm1719df |> st_drop_geometry())

p1_mm1719 <- ggplot(mm1719df_reg) + 
  geom_sf(aes(fill=`fit.s.region.`), lwd=0.1) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  coord_sf(datum=NA) + 
  geom_sf(data=regions, fill=NA) + 
  coord_sf(datum=NA) + 
  theme_bw() +
  labs(fill = "geographic\neffect",
       title = "Random neighbourhood effect",
       subtitle = "by region")

mm1719df_unique <- mm1719df |> 
  st_drop_geometry() |> 
  group_by(region) |> 
  unique()

fe_mm1719 <- extract_fixed(mm1719, ci_level = 0.95, digits = 3) |>  
  mutate(term = fct_reorder(term, value))

re_mm1719 <- extract_ranef(mm1719, ci_level = 0.95, digits = 3) |>  
  mutate(term = fct_reorder(effect, value))

fe_mm1719$swingto <- case_when(fe_mm1719$value>0 ~ "Conservative",
                               TRUE ~ "Labour")

p2_mm1719 <- ggplot(fe_mm1719, aes(x=value, y=term,
                 xmin=lower_2.5,
                 xmax=upper_97.5, 
                 fill=swingto,
                 colour=swingto)) + 
  geom_errorbar(lwd=1.5, colour="black") + 
  geom_point(shape=21, size=3) + 
  scale_fill_manual(breaks = c("Conservative", "Labour"),
                     values = c("darkblue", "firebrick4")) + 
  scale_colour_manual(breaks = c("Conservative", "Labour"),
                     values = c("darkblue", "firebrick4")) + 
  geom_vline(xintercept = 0, colour="red") + 
  theme_bw() + 
  guides(fill="none",
         colour="none") + 
  labs(x="coefficient effect", 
       y=NULL,
       title = "Fixed effects from mixed model",
       subtitle = paste0("Butler swing to Conservatives by 5 demographic composition variables. \nAIC: ",
                         round(AIC(mm1719))))

ggarrange(p2_mm1719,p1_mm1719)

```


```{r}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

pvals <- tidy(mm1719) |> 
  select(p.value) |> 
  round(3) |> 
  rbind("-") |> 
  data.frame()

gratia::variance_comp(mm1719) |> 
  data.frame() |> 
  mutate(`total variance` = sum(variance),
         `variance (%)` = round(100*variance/`total variance`,2),
         variance= round(variance,2),
         `cum. variance (%)` = round(cumsum(`variance (%)`),1),
         `p-vals (F-test)` = pvals) |> 
  select(component,variance,`variance (%)`,`cum. variance (%)`,`p-vals (F-test)`) |> 
  kbl() |> 
  kable_classic(full_width = F) |> 
  row_spec(4, hline_after = T) |> 
  row_spec(5, hline_after = T, background = "#DAF7A6") |> 
  row_spec(6, background = "#F8BBC2") |> 
  row_spec(0, bold=T)

```


```{r}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

mm_plot_list1719 <- list()
i=1
for (var in levels(df_scaled$region)){
  mmtemp <- re_mm1719[re_mm1719$group==levels(df_scaled$region)[i],]
  mmtemp$swingto <- case_when(mmtemp$value>0 ~ "Conservative",
                              TRUE ~ "Labour")
  mm_plot_list1719[[i]] <- ggplot(mmtemp, aes(x=value, y=effect,
                                              xmin=lower_2.5,
                                              xmax=upper_97.5, 
                                              fill=swingto,
                                              colour=swingto)) + 
    geom_errorbar(lwd=0.5, colour="black") + 
    geom_point(shape=21, size=3) + 
    scale_fill_manual(breaks = c("Conservative", "Labour"),
                      values = c("darkblue", "firebrick4")) + 
    scale_colour_manual(breaks = c("Conservative", "Labour"),
                        values = c("darkblue", "firebrick4")) + 
    geom_vline(xintercept = 0, colour="red") + 
    theme_bw() + 
    theme(plot.title =element_text(size=10, face='bold'),
          plot.subtitle =element_text(size=8)) + 
    labs(x="coefficient effect", 
         y=NULL, 
         title = levels(df_scaled$region)[i]) + 
    guides(fill="none",
           colour="none")
  
  i= i+1
}

```

```{r, fig.width=10,fig.height=8}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

(plot_spacer()|plot_spacer()|mm_plot_list1719[[5]]|plot_spacer()) / 
  (plot_spacer()|mm_plot_list1719[[4]]|mm_plot_list1719[[6]]|mm_plot_list1719[[11]]|plot_spacer()) / 
  (mm_plot_list1719[[9]]|mm_plot_list1719[[10]]|mm_plot_list1719[[2]]|mm_plot_list1719[[1]]) /
  (plot_spacer()|mm_plot_list1719[[8]]|mm_plot_list1719[[3]]|mm_plot_list1719[[7]]) +
  plot_annotation(
    title = "Random effects from mixed model",
    subtitle = "5 variables, by region",
    theme = theme(plot.title = element_text(size = 16))
  )

```



## Output area level

It takes an extremely long time to perform skater algorithm on this number of units. Results only shown for Merseyside and North East, which have the smallest number of output areas.

### Get data

```{r}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false


# https://www.kaggle.com/datasets/kulbinderdio/uk2011census?select=Output_Areas__December_2011__Boundaries_EW_BFC-shp

# shpcensus2011 <- st_read("/Users/kevinhoran/Documents/R/SecondTermProject/Output_Areas__December_2011__Boundaries_EW_BFC-shp/Output_Areas__December_2011__Boundaries_EW_BFC.shp") |>
#   select(2:5)

# https://www.nomisweb.co.uk
# requested for output area, as percentage of normally resident population

# voting_age_pop_output <- read.csv("/Users/kevinhoran/Documents/R/SecondTermProject/3273840673993134.csv", skip = 7)
# voting_age_pop_output$popvoting = rowSums(voting_age_pop_output[,3:12])
# voting_age_pop_output <- voting_age_pop_output |> select(1,13)
# 
# degree_output <- read.csv("/Users/kevinhoran/Documents/R/SecondTermProject/3923191771586158.csv", skip = 7)
# 
# pop_16over <- read_csv("/Users/kevinhoran/Documents/R/SecondTermProject/31274602083227207.csv", skip = 7)
# pop_16over$tot_16over = rowSums(pop_16over[,3:13])
# 
# degree_perover16 <- degree_output |>
#   left_join(pop_16over, by = c("X2011.output.area"="2011 output area")) |>
#   rename(degree_tot = X2011,
#          `2011 output area` = X2011.output.area) |>
#   mutate(degree_tot = as.numeric(degree_tot),
#          degree_educated = 100*degree_tot/tot_16over) |>
#   select(1,16)
# 
# white_output <- read_csv("/Users/kevinhoran/Documents/R/SecondTermProject/3287254723388837.csv", skip = 7) |>
#   select(1,3) |>
#   rename(white = White)
# 
# younger_adults_output <- read_csv("/Users/kevinhoran/Documents/R/SecondTermProject/30537531257723874.csv", skip = 7) |>
#   mutate(younger_adults = `Age 18 to 19`+`Age 20 to 24`+`Age 25 to 29`+`Age 30 to 44`) |>
#   select(1,7)
# 
# health_not_good_output <- read_csv("/Users/kevinhoran/Documents/R/SecondTermProject/1835231811976325.csv", skip = 7) |>
#   mutate(health_not_good = `Fair health`+`Bad health`+`Very bad health`) |>
#   select(1,6)

# https://webarchive.nationalarchives.gov.uk/ukgwa/20160110200239/http://www.ons.gov.uk/ons/guide-method/geography/products/census/lookup/2011/index.html
# region_output <- read_csv("/Users/kevinhoran/Documents/R/SecondTermProject/Output_areas_(2011)_to_regions_(2011)_Eng_lookup/OA11_RGN11_EN_LU.csv") |>
#   select(1,3) |>
#   mutate(RGN11NM = case_when(RGN11NM == "East of England" ~ "East",
#                              TRUE ~ RGN11NM))
# 
# output_df <- left_join(white_output,
#                        degree_perover16,
#                        by = "2011 output area") |>
#   left_join(younger_adults_output,
#             by = "2011 output area") |>
#   left_join(health_not_good_output,
#             by = "2011 output area") |>
#   left_join(voting_age_pop_output,
#             by = c("2011 output area"="X2011.output.area")) |>
#   left_join(shpcensus2011,
#             by = c(`2011 output area` = "OA11CD")) |>
#   left_join(region_output,
#             by = c(`2011 output area` = "OA11CD")) |>
#   rename(region = RGN11NM) |>
#   mutate(region = case_when(str_detect(`2011 output area`,"W") ~ "Wales",
#                             TRUE ~ region))
# 
# saveRDS(output_df[1:181408,], "output_df.rds")

```


```{r}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

output_df <- readRDS(here("data","output_df.rds"))

# scale the variables
op_scaled <- output_df
#op_scaled[,2:5] <- scale(output_df[,2:5])

# scale the variables on same scale as model using df mean and sd
op_scaled$degree_educated <- (output_df$degree_educated - mean(df$degree_educated))/sd(df$degree_educated)
op_scaled$white <- (output_df$white - mean(df$white))/sd(df$white)
op_scaled$health_not_good <- (output_df$health_not_good - mean(df$health_not_good))/sd(df$health_not_good)
op_scaled$younger_adults <- (output_df$younger_adults - mean(df$younger_adults))/sd(df$younger_adults)

op_scaled_region <- op_scaled |>
  mutate(region = case_when(LAD16NM %in% c("Liverpool","Knowsley","Sefton","St. Helens","Wirral") ~ "Merseyside",
                            TRUE ~ region))

# # remove output geometry and merge to regions df
# output_scregsf <- inner_join(op_scaled_region |> select(-geometry),regions) |>
#   st_as_sf() |>
#   st_transform(crs=27700)
# output_scregsf$region <- factor(output_scregsf$region)
#  saveRDS(output_scregsf,"output_scregsf.rds")

output_scregsf <- readRDS(here("data","output_scregsf.rds"))

```



### Predict results using region model

```{r, fig.width=12, fig.height=12}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

test <- predict(mm1719, output_scregsf)

op_scaled_region$test <- test

se_op <- ggplot() + 
  geom_sf(data=op_scaled_region |> filter(region=="South East") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="South East"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "South East",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

se_cn <- ggplot(df |> filter(region=="South East")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "South East",
       subtitle = "Swing by constituency") + 
  theme_bw()

sw_op <- ggplot() + 
  geom_sf(data=op_scaled_region |> filter(region=="South West") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="South West"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "South West",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

sw_cn <- ggplot(df |> filter(region=="South West")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "South West",
       subtitle = "Swing by constituency") + 
  theme_bw()

l_op <- ggplot() + 
  geom_sf(data=op_scaled_region |> filter(region=="London") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="London"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "London",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

l_cn <- ggplot(df |> filter(region=="London")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "London",
       subtitle = "Swing by constituency") + 
  theme_bw()

w_op <- ggplot() + 
  geom_sf(data=op_scaled_region |> filter(region=="Wales") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="Wales"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "Wales",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

w_cn <- ggplot(df |> filter(region=="Wales")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "Wales",
       subtitle = "Swing by constituency") + 
  theme_bw()

wm_op <- ggplot() + 
  geom_sf(data=op_scaled_region |> filter(region=="West Midlands") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="West Midlands"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "West Midlands",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

wm_cn <- ggplot(df |> filter(region=="West Midlands")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "West Midlands",
       subtitle = "Swing by constituency") +  
  theme_bw()

em_op <- ggplot() + 
  geom_sf(data=op_scaled_region |> filter(region=="East Midlands") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="East Midlands"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "East Midlands",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

em_cn <- ggplot(df |> filter(region=="East Midlands")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "East Midlands",
       subtitle = "Swing by constituency") + 
  theme_bw()

e_op <- ggplot() + 
  geom_sf(data=op_scaled_region |> filter(region=="East") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="East"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "East",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

e_cn <- ggplot(df |> filter(region=="East")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "East",
       subtitle = "Swing by constituency") + 
  theme_bw()

yh_op <- ggplot() + 
  geom_sf(data=op_scaled_region |> filter(region=="Yorkshire and The Humber") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="Yorkshire and The Humber"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "Yorkshire and The Humber",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

yh_cn <- ggplot(df |> filter(region=="Yorkshire and The Humber")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "Yorkshire and The Humber",
       subtitle = "Swing by constituency") + 
  theme_bw()

nw_op <- ggplot() + 
  geom_sf(data=op_scaled_region |> filter(region=="North West") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="North West"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "North West",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

nw_cn <- ggplot(df |> filter(region=="North West")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "North West",
       subtitle = "Swing by constituency") + 
  theme_bw()

ne_op <- ggplot() + 
  geom_sf(data=op_scaled_region |> filter(region=="North East") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="North East"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "North East",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

ne_cn <- ggplot(df |> filter(region=="North East")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "North East",
       subtitle = "Swing by constituency") + 
  theme_bw()

m_op <- ggplot() + 
  geom_sf(data=op_scaled_region |> filter(region=="Merseyside") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="Merseyside"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "Merseyside",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

m_cn <- ggplot(df |> filter(region=="Merseyside")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "Merseyside",
       subtitle = "Swing by constituency") + 
  theme_bw()

```


```{r, fig.width=12, fig.height=12}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

ggarrange(se_op, se_cn, nrow=2, common.legend = TRUE)
ggarrange(sw_op, sw_cn, nrow=2, common.legend = TRUE)
ggarrange(l_op, l_cn, nrow=2, common.legend = TRUE)
ggarrange(w_op, w_cn, nrow=2, common.legend = TRUE)
ggarrange(wm_op, wm_cn, nrow=2, common.legend = TRUE)
ggarrange(em_op, em_cn, nrow=2, common.legend = TRUE)
ggarrange(yh_op, yh_cn, nrow=2, common.legend = TRUE)
ggarrange(e_op, e_cn, nrow=2, common.legend = TRUE)
ggarrange(nw_op, nw_cn, nrow=2, common.legend = TRUE)
ggarrange(ne_op, ne_cn, nrow=2, common.legend = TRUE)
ggarrange(m_op, m_cn, nrow=2, common.legend = TRUE)

```




#### Merseyside new boundaries

Based on predicted swing similarities in output areas, using model based on regions.
Merseyside displays 2 disjoint networks so a separate operation is performed on each.
Merseyside has 15 constituencies. The ratio of output areas in the two disjoint zones are 3611:1071, so the 15 constituencies are allocated in ratio 11:4.
Minimum output areas per constituency is set at 190.

```{r, fig.width=12, fig.height=12}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

spatial_m_op <- op_scaled_region |> filter(region == "Merseyside") |> 
  st_as_sf() |> 
  as_Spatial()

nlist_output <- poly2nb(spatial_m_op)
class(nlist_output) <- "nb"

# calculate number of disjoint
disjoint <- spdep::n.comp.nb(nlist_output)

# perform separate skater for each disjoint zone
spatial_m_op1 <- spatial_m_op[which(disjoint$comp.id==1),]
spatial_m_op2 <- spatial_m_op[which(disjoint$comp.id==2),]

nlist_output1 <- poly2nb(spatial_m_op1)
nlist_output2 <- poly2nb(spatial_m_op2)

vars <- "test"

sdat1 <- data.frame(spatial_m_op1@data[,vars])
sdat2 <- data.frame(spatial_m_op2@data[,vars])

# edge costs - dissimilarity between node and its neighbours
lcosts1 <- nbcosts(nlist_output1,sdat1)
lcosts2 <- nbcosts(nlist_output2,sdat2)

# make this into a weights object
# style is B to make sure cost values are not row-standardised
df.w1 <- nb2listw(nlist_output1,lcosts1,style = "B")
df.w2 <- nb2listw(nlist_output2,lcosts2,style = "B")

# create minimum spanning tree
df.mst1 <- mstree(df.w1)
df.mst2 <- mstree(df.w2)

# zone 1
# clus_numb1 <- 11
# clus1 <- spdep::skater(df.mst1[,1:2],sdat1,clus_numb1-1,crit=190)
# ccs1 <- factor(clus1$groups)
# 
# m_opsf1 <- spatial_m_op1 |>
#   st_as_sf() |>
#   mutate(ccs1 = ccs1)
# 
# saveRDS(m_opsf1,"m_opsf1.rds")

m_opsf1 <- readRDS(here("data","m_opsf1.rds"))
  
ggplot() + 
  geom_sf(data=m_opsf1, aes(fill=ccs1), lwd=0.1, colour=NA) + 
  coord_sf(datum=NA) + 
  theme_bw()

mclus1 <- m_opsf1 |> 
  group_by(ccs1) |> 
  summarise()

ggplot() + 
  geom_sf(data=m_opsf1, aes(fill=test), lwd=0.1, colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=mclus1, fill=NA) + 
  coord_sf(datum=NA) + 
  theme_bw()

# zone 2

clus_numb2 <- 5 

clus2 <- spdep::skater(df.mst2[,1:2],sdat2,clus_numb2-1,crit=190)
ccs2 <- factor(clus2$groups)

m_opsf2 <- spatial_m_op2 |> 
  st_as_sf() |> 
  mutate(ccs2 = ccs2)
  
ggplot() + 
  geom_sf(data=m_opsf2, aes(fill=ccs2), lwd=0.1, colour=NA) + 
  coord_sf(datum=NA) + 
  theme_bw()

mclus2 <- m_opsf2 |> 
  group_by(ccs2) |> 
  summarise()

ggplot() + 
  geom_sf(data=m_opsf2, aes(fill=test), lwd=0.1, colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=mclus2, fill=NA,colour="black", lwd=1) + 
  coord_sf(datum=NA) + 
  theme_bw()

```


```{r, fig.width=12, fig.height=12}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

m_op <- ggplot() + 
  geom_sf(data=op_scaled_region |> filter(region=="Merseyside") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(-10,10)) + 
  geom_sf(data=df |> filter(region=="Merseyside"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "Merseyside",
       subtitle = "Predicted swing by output area") + 
  coord_sf(datum=NA) + 
  theme_bw()

m_cn <- ggplot(df |> filter(region=="Merseyside")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(-10,10)) + 
  labs(fill="Swing",
       title = "Merseyside",
       subtitle = "Swing by constituency") + 
  coord_sf(datum=NA) + 
  theme_bw()

m_newbound <- ggplot() + 
  geom_sf(data=m_opsf1, aes(fill=test), lwd=0.1, colour=NA) + 
  geom_sf(data=m_opsf2, aes(fill=test), lwd=0.1, colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(-10,10)) + 
  geom_sf(data=mclus1, fill=NA) + 
  geom_sf(data=mclus2, fill=NA,colour="black", lwd=1) + 
  labs(fill="Swing",
       title = "Merseyside",
       subtitle = "New boundaries") + 
  coord_sf(datum=NA) + 
  theme_bw()

m_agg1 <- m_opsf1 |> 
  group_by(ccs1) |> 
  summarise(agg_swing = weighted.mean(test,popvoting))

m_agg2 <- m_opsf2 |> 
  group_by(ccs2) |> 
  summarise(agg_swing = weighted.mean(test,popvoting))

p_m_agg <- ggplot() + 
  geom_sf(data=m_agg1, aes(fill=agg_swing)) + 
  geom_sf(data=m_agg2, aes(fill=agg_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(-10,10)) + 
  labs(fill="Swing",
       title = "Merseyside",
       subtitle = "New boundaries aggregated swing") + 
  coord_sf(datum=NA) + 
  theme_bw()


ggarrange(m_op, m_newbound, m_cn, p_m_agg, nrow=2, ncol=2, common.legend = TRUE)

```


#### North East new boundaries

Based on predicted swing similarities in output areas, using model based on regions.
North East displays 3 disjoint networks so a separate operation is performed on each.
North East has 29 constituencies.
Minimum output areas per constituency is set at 200.

```{r}

spatial_ne_op <- op_scaled_region |> filter(region == "North East") |> 
  st_as_sf() |> 
  as_Spatial()

nlist_output <- poly2nb(spatial_ne_op)
class(nlist_output) <- "nb"

# calculate number of disjoint
disjoint <- spdep::n.comp.nb(nlist_output)

# perform separate skater for each disjoint zone
spatial_ne_op1 <- spatial_ne_op[which(disjoint$comp.id==1),]
spatial_ne_op2 <- spatial_ne_op[which(disjoint$comp.id==2),]
spatial_ne_op3 <- spatial_ne_op[which(disjoint$comp.id==3),] # only one output area

nlist_output1 <- poly2nb(spatial_ne_op1)
nlist_output2 <- poly2nb(spatial_ne_op2)

vars <- "test"

sdat1 <- data.frame(spatial_ne_op1@data[,vars])
sdat2 <- data.frame(spatial_ne_op2@data[,vars])

# edge costs - dissimilarity between node and its neighbours
lcosts1 <- nbcosts(nlist_output1,sdat1)
lcosts2 <- nbcosts(nlist_output2,sdat2)

# make this into a weights object
# style is B to make sure cost values are not row-standardised
df.w1 <- nb2listw(nlist_output1,lcosts1,style = "B")
df.w2 <- nb2listw(nlist_output2,lcosts2,style = "B")

# create minimum spanning tree
df.mst1 <- mstree(df.w1)
df.mst2 <- mstree(df.w2)

# zone 1
# clus_numb1 <- 29
# clus1 <- spdep::skater(df.mst1[,1:2],sdat1,clus_numb1-1,crit=190)
# ccs1 <- factor(clus1$groups)
# 
# ne_opsf1 <- spatial_ne_op1 |>
#   st_as_sf() |>
#   mutate(ccs1 = ccs1)
# 
# saveRDS(ne_opsf1,"ne_opsf1.rds")

ne_opsf1 <- readRDS(here("data","ne_opsf1.rds"))

ggplot() + 
  geom_sf(data=ne_opsf1, aes(fill=ccs1), lwd=0.1, colour=NA) + 
  coord_sf(datum=NA) + 
  theme_bw()

neclus1 <- ne_opsf1 |> 
  group_by(ccs1) |> 
  summarise()

ggplot() + 
  geom_sf(data=ne_opsf1, aes(fill=test), lwd=0.1, colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=neclus1, fill=NA) + 
  coord_sf(datum=NA) + 
  theme_bw()

# zone 2

clus_numb2 <- 2 

clus2 <- spdep::skater(df.mst2[,1:2],sdat2,clus_numb2-1,crit=190)
ccs2 <- factor(clus2$groups)

ne_opsf2 <- spatial_ne_op2 |> 
  st_as_sf() |> 
  mutate(ccs2 = ccs2)
  
ggplot() + 
  geom_sf(data=ne_opsf2, aes(fill=ccs2), lwd=0.1, colour=NA) + 
  coord_sf(datum=NA) + 
  theme_bw()

neclus2 <- ne_opsf2 |> 
  group_by(ccs2) |> 
  summarise()

ggplot() + 
  geom_sf(data=ne_opsf2, aes(fill=test), lwd=0.1, colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=neclus2, fill=NA,colour="black", lwd=1) + 
  coord_sf(datum=NA) + 
  theme_bw()

# zone 3

ne_opsf3 <- st_as_sf(spatial_ne_op3)
ggplot() + 
  geom_sf(data=ne_opsf3, aes(fill=test), lwd=0.1, colour=NA) + 
  coord_sf(datum=NA) + 
  theme_bw()

```



```{r, fig.width=12, fig.height=12}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

ne_op <- ggplot() + 
  geom_sf(data=op_scaled_region |> filter(region=="North East") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(-10,18)) + 
  geom_sf(data=df |> filter(region=="North East"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "North East",
       subtitle = "Predicted swing by output area") + 
  coord_sf(datum=NA) + 
  theme_bw()

ne_cn <- ggplot(df |> filter(region=="North East")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(-10,18)) + 
  labs(fill="Swing",
       title = "North East",
       subtitle = "Swing by constituency") + 
  coord_sf(datum=NA) + 
  theme_bw()

ne_newbound <- ggplot() + 
  geom_sf(data=ne_opsf1, aes(fill=test), lwd=0.1, colour=NA) + 
  geom_sf(data=ne_opsf2, aes(fill=test), lwd=0.1, colour=NA) + 
  geom_sf(data=ne_opsf3, aes(fill=test), lwd=0.1, colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(-10,18)) + 
  geom_sf(data=neclus1, fill=NA) + 
  geom_sf(data=neclus2, fill=NA,colour="black", lwd=1) + 
  labs(fill="Swing",
       title = "North East",
       subtitle = "New boundaries") + 
  coord_sf(datum=NA) + 
  theme_bw()

ne_agg1 <- ne_opsf1 |> 
  group_by(ccs1) |> 
  summarise(agg_swing = weighted.mean(test,popvoting))

ne_agg2 <- ne_opsf2 |> 
  group_by(ccs2) |> 
  summarise(agg_swing = weighted.mean(test,popvoting))

p_ne_agg <- ggplot() + 
  geom_sf(data=ne_agg1, aes(fill=agg_swing)) + 
  geom_sf(data=ne_agg2, aes(fill=agg_swing)) + 
  geom_sf(data=ne_opsf3, aes(fill=test)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(-10,18)) + 
  labs(fill="Swing",
       title = "North East",
       subtitle = "New boundaries aggregated swing") + 
  coord_sf(datum=NA) + 
  theme_bw()


ggarrange(ne_op, ne_newbound, ne_cn, p_ne_agg, nrow=2, ncol=2, common.legend = TRUE)

```


## Lower super output area level

Much quicker and more manageable than output areas above

### Get data

```{r}

# from: https://geoportal.statistics.gov.uk/datasets/ons::output-area-to-lower-layer-super-output-area-to-middle-layer-super-output-area-to-local-authority-district-december-2011-lookup-in-england-and-wales-1/explore

# lookup <- read_csv("/Users/kevinhoran/Documents/R/SecondTermProject/Output_Area_to_Lower_layer_Super_Output_Area_to_Middle_layer_Super_Output_Area_to_Local_Authority_District_(December_2011)_Lookup_in_England_and_Wales.csv")

# superoutput_df <- output_df |>
#   left_join(lookup,
#             by=c("2011 output area"="OA11CD")) |>
#   select(2:6,8,9,11,12,13) |>
#   group_by(LSOA11NM) |>
#   summarise(white = weighted.mean(white,popvoting),
#             degree_educated = weighted.mean(degree_educated,popvoting),
#             younger_adults = weighted.mean(younger_adults,popvoting),
#             health_not_good = weighted.mean(health_not_good,popvoting),
#             popvoting = sum(popvoting),
#             LSOA11NM = LSOA11NM,
#             LSOA11CD = LSOA11CD,
#             region = region) |>
#   unique()

# superoutput_sf <- output_df |>
#   left_join(lookup,
#             by=c("2011 output area"="OA11CD")) |>
#   select(9,10,12,13) |>
#   st_as_sf() |>
#   group_by(LSOA11CD) |>
#   summarise()
# 
# lso_df <- left_join(superoutput_df,superoutput_sf, by="LSOA11CD") |>
#   st_as_sf()
# 
# saveRDS(lso_df, "lso_df.rds")

lso_df <- readRDS(here("data","lso_df.rds"))

# scale the variables
lso_dfsc <- lso_df

# scale the variables on same scale as model using df mean and sd
lso_dfsc$degree_educated <- (lso_dfsc$degree_educated - mean(df$degree_educated))/sd(df$degree_educated)
lso_dfsc$white <- (lso_dfsc$white - mean(df$white))/sd(df$white)
lso_dfsc$health_not_good <- (lso_dfsc$health_not_good - mean(df$health_not_good))/sd(df$health_not_good)
lso_dfsc$younger_adults <- (lso_dfsc$younger_adults - mean(df$younger_adults))/sd(df$younger_adults)

lso_dfsc2 <- lso_dfsc |>
  mutate(region = case_when(str_detect(LSOA11NM,"Liverpool|Knowsley|Sefton|St. Helens|Wirral") ~ "Merseyside",
                            TRUE ~ region))
lso_dfsc2$region <- factor(lso_dfsc2$region)

```


### Predict results using region model

```{r, fig.width=12, fig.height=12}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

lso_dfsc2$test <- predict(mm1719, lso_dfsc2)

se_lsoa <- ggplot() + 
  geom_sf(data=lso_dfsc2 |> filter(region=="South East") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="South East"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "South East",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

se_cn <- ggplot(df |> filter(region=="South East")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "South East",
       subtitle = "Swing by constituency") + 
  theme_bw()

sw_lsoa <- ggplot() + 
  geom_sf(data=lso_dfsc2 |> filter(region=="South West") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="South West"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "South West",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

sw_cn <- ggplot(df |> filter(region=="South West")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "South West",
       subtitle = "Swing by constituency") + 
  theme_bw()

l_lsoa <- ggplot() + 
  geom_sf(data=lso_dfsc2 |> filter(region=="London") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="London"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "London",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

l_cn <- ggplot(df |> filter(region=="London")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "London",
       subtitle = "Swing by constituency") + 
  theme_bw()

w_lsoa <- ggplot() + 
  geom_sf(data=lso_dfsc2 |> filter(region=="Wales") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="Wales"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "Wales",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

w_cn <- ggplot(df |> filter(region=="Wales")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "Wales",
       subtitle = "Swing by constituency") + 
  theme_bw()

wm_lsoa <- ggplot() + 
  geom_sf(data=lso_dfsc2 |> filter(region=="West Midlands") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="West Midlands"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "West Midlands",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

wm_cn <- ggplot(df |> filter(region=="West Midlands")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "West Midlands",
       subtitle = "Swing by constituency") +  
  theme_bw()

em_lsoa <- ggplot() + 
  geom_sf(data=lso_dfsc2 |> filter(region=="East Midlands") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="East Midlands"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "East Midlands",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

em_cn <- ggplot(df |> filter(region=="East Midlands")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "East Midlands",
       subtitle = "Swing by constituency") + 
  theme_bw()

e_lsoa <- ggplot() + 
  geom_sf(data=lso_dfsc2 |> filter(region=="East") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="East"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "East",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

e_cn <- ggplot(df |> filter(region=="East")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "East",
       subtitle = "Swing by constituency") + 
  theme_bw()

yh_lsoa <- ggplot() + 
  geom_sf(data=lso_dfsc2 |> filter(region=="Yorkshire and The Humber") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="Yorkshire and The Humber"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "Yorkshire and The Humber",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

yh_cn <- ggplot(df |> filter(region=="Yorkshire and The Humber")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "Yorkshire and The Humber",
       subtitle = "Swing by constituency") + 
  theme_bw()

nw_lsoa <- ggplot() + 
  geom_sf(data=lso_dfsc2 |> filter(region=="North West") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="North West"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "North West",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

nw_cn <- ggplot(df |> filter(region=="North West")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "North West",
       subtitle = "Swing by constituency") + 
  theme_bw()

ne_lsoa <- ggplot() + 
  geom_sf(data=lso_dfsc2 |> filter(region=="North East") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="North East"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "North East",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

ne_cn <- ggplot(df |> filter(region=="North East")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "North East",
       subtitle = "Swing by constituency") + 
  theme_bw()

m_lsoa <- ggplot() + 
  geom_sf(data=lso_dfsc2 |> filter(region=="Merseyside") |> st_as_sf(), aes(fill=test),colour=NA) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  geom_sf(data=df |> filter(region=="Merseyside"), fill=NA, lwd=5, colour="black") +
  labs(fill="Swing",
       title = "Merseyside",
       subtitle = "Predicted swing by output area") + 
  theme_bw()

m_cn <- ggplot(df |> filter(region=="Merseyside")) + geom_sf(aes(fill=con_swing)) + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(fill="Swing",
       title = "Merseyside",
       subtitle = "Swing by constituency") + 
  theme_bw()

```


```{r, fig.width=12, fig.height=12}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

ggarrange(se_lsoa, se_cn, nrow=2, common.legend = TRUE)
ggarrange(sw_lsoa, sw_cn, nrow=2, common.legend = TRUE)
ggarrange(l_lsoa, l_cn, nrow=2, common.legend = TRUE)
ggarrange(w_lsoa, w_cn, nrow=2, common.legend = TRUE)
ggarrange(wm_lsoa, wm_cn, nrow=2, common.legend = TRUE)
ggarrange(em_lsoa, em_cn, nrow=2, common.legend = TRUE)
ggarrange(yh_lsoa, yh_cn, nrow=2, common.legend = TRUE)
ggarrange(e_lsoa, e_cn, nrow=2, common.legend = TRUE)
ggarrange(nw_lsoa, nw_cn, nrow=2, common.legend = TRUE)
ggarrange(ne_lsoa, ne_cn, nrow=2, common.legend = TRUE)
ggarrange(m_lsoa, m_cn, nrow=2, common.legend = TRUE)

```




### Generate new boundaries

Fitting new boundaries at lower super output area level. 

Choosing the model:

```{r, fig.width=12, fig.height=12}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

lso_dfsc2$test <- predict(mm1719, lso_dfsc2)

min_swing <- min(lso_dfsc2$test)
max_swing <- max(lso_dfsc2$test)

```


Loop to create new boundaries.

```{r, fig.width=12, fig.height=12}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

# b_list <- list()
# 
# new_polys <- list()
# 
# for (i in 1:length(levels(df$region)))
# {
#   print(paste("Working on plot: ",i,"/",length(levels(df$region))," - ",levels(df$region)[i]))
#   
#   spatial_m_lsoa <- lso_dfsc2 |> filter(region == levels(df$region)[i]) |> 
#     st_as_sf() |> 
#     as_Spatial()
#   
#   nlist_output <- poly2nb(spatial_m_lsoa)
#   class(nlist_output) <- "nb"
#   
#   # calculate number of disjoint
#   disjoint <- spdep::n.comp.nb(nlist_output)
#   num_disj <- as.numeric(length(unique(disjoint$comp.id)))
#   tab_disj <- data.frame(table(disjoint$comp.id))
#   tab_disj$weight <- tab_disj$Freq/sum(tab_disj$Freq)
#   
#   if(num_disj == 1)
#   {
#     # perform separate skater for each disjoint zone
#     spatial_m_lsoa1 <- spatial_m_lsoa[which(disjoint$comp.id==1),]
#     
#     nlist_output1 <- poly2nb(spatial_m_lsoa1)
#     
#     vars <- "test"
#     
#     sdat1 <- data.frame(spatial_m_lsoa1@data[,vars])
#     
#     # edge costs - dissimilarity between node and its neighbours
#     lcosts1 <- nbcosts(nlist_output1,sdat1)
#     
#     # make this into a weights object
#     # style is B to make sure cost values are not row-standardised
#     df.w1 <- nb2listw(nlist_output1,lcosts1,style = "B")
#     
#     # create minimum spanning tree
#     df.mst1 <- mstree(df.w1)
#     
#     # zone 1
#     clus_numb1 <- nrow(df[df$region==levels(df$region)[i],])
#     clus1 <- spdep::skater(df.mst1[,1:2],sdat1,clus_numb1-1,crit=20)
#     ccs1 <- factor(clus1$groups)
#     
#     m_lsoa_sf1 <- spatial_m_lsoa1 |>
#       st_as_sf() |>
#       mutate(ccs1 = ccs1)
#     
#     mclus1 <- m_lsoa_sf1 |> 
#       group_by(ccs1) |> 
#       summarise() # new polygons
#     
#     new_polys[[i]] <- m_lsoa_sf1 |> 
#       group_by(ccs1) |> 
#       summarise(swing=weighted.mean(test,popvoting)) |> 
#       rename(new_clust = ccs1)
#     
#     # make 4 plots
#     
#     l_lsoa <- ggplot() + 
#       geom_sf(data=lso_dfsc2 |> filter(region==levels(df$region)[i]) |> st_as_sf(), aes(fill=test),colour=NA) + 
#       scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(min_swing,max_swing)) + 
#       geom_sf(data=df |> filter(region==levels(df$region)[i]), fill=NA, lwd=1, colour="black") +
#       labs(fill="Swing",
#            title = levels(df$region)[i],
#            subtitle = "Predicted swing by output area") + 
#       coord_sf(datum=NA) + 
#       theme_bw()
#     
#     l_cn <- ggplot(df |> filter(region==levels(df$region)[i])) + geom_sf(aes(fill=con_swing)) + 
#       scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(min_swing,max_swing)) + 
#       labs(fill="Swing",
#            title = levels(df$region)[i],
#            subtitle = "Swing by constituency") + 
#       coord_sf(datum=NA) + 
#       theme_bw()
#     
#     l_newbound <- ggplot() + 
#       geom_sf(data=m_lsoa_sf1, aes(fill=test), lwd=0.1, colour=NA) + 
#       scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(min_swing,max_swing)) + 
#       geom_sf(data=mclus1, fill=NA,colour="black", lwd=0.1) + 
#       labs(fill="Swing",
#            title = levels(df$region)[i],
#            subtitle = "New boundaries") + 
#       coord_sf(datum=NA) + 
#       theme_bw()
#     
#     l_agg1 <- m_lsoa_sf1 |> 
#       group_by(ccs1) |> 
#       summarise(agg_swing = weighted.mean(test,popvoting))
#     
#     
#     p_l_agg <- ggplot() + 
#       geom_sf(data=l_agg1, aes(fill=agg_swing), lwd=1) + 
#       scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(min_swing,max_swing)) + 
#       labs(fill="Swing",
#            title = levels(df$region)[i],
#            subtitle = "New boundaries aggregated swing") + 
#       coord_sf(datum=NA) + 
#       theme_bw()
#     
#     
#     b_list[[i]] <- ggarrange(l_lsoa, l_newbound, l_cn, p_l_agg, nrow=2, ncol=2, common.legend = TRUE)
#   }
#   
#   if (num_disj == 2)
#   {
#     
#     # perform separate skater for each disjoint zone
#     spatial_m_lsoa1 <- spatial_m_lsoa[which(disjoint$comp.id==1),]
#     spatial_m_lsoa2 <- spatial_m_lsoa[which(disjoint$comp.id==2),]
#     
#     nlist_output1 <- poly2nb(spatial_m_lsoa1)
#     
#     if(nrow(spatial_m_lsoa2) > 1)
#     {
#       nlist_output2 <- poly2nb(spatial_m_lsoa2)
#     }
#     
#     vars <- "test"
#     
#     sdat1 <- data.frame(spatial_m_lsoa1@data[,vars])
#     if(nrow(spatial_m_lsoa2) > 1)
#     {
#       sdat2 <- data.frame(spatial_m_lsoa2@data[,vars])
#     }
#     
#     # edge costs - dissimilarity between node and its neighbours
#     lcosts1 <- nbcosts(nlist_output1,sdat1)
#     if(nrow(spatial_m_lsoa2) > 1)
#     {
#       lcosts2 <- nbcosts(nlist_output2,sdat2)
#     }
#     
#     # make this into a weights object
#     # style is B to make sure cost values are not row-standardised
#     df.w1 <- nb2listw(nlist_output1,lcosts1,style = "B")
#     if(nrow(spatial_m_lsoa2) > 1)
#     {
#       df.w2 <- nb2listw(nlist_output2,lcosts2,style = "B")
#     }
#     
#     # create minimum spanning tree
#     df.mst1 <- mstree(df.w1)
#     if(nrow(spatial_m_lsoa2) > 1)
#     {
#       df.mst2 <- mstree(df.w2)
#     }
#     
#     # zone 1
#     clus_numb1 <- round(nrow(df[df$region==levels(df$region)[i],]) * tab_disj$weight[1])
#     
#     clus1 <- spdep::skater(df.mst1[,1:2],sdat1,clus_numb1-1,crit=20)
#     ccs1 <- factor(clus1$groups)
#     
#     m_opsf1 <- spatial_m_lsoa1 |>
#       st_as_sf() |>
#       mutate(ccs1 = ccs1)
#     
#     mclus1 <- m_opsf1 |>
#       group_by(ccs1) |>
#       summarise()
#     
#     # zone 2
#     
#     clus_numb2 <- round(nrow(df[df$region==levels(df$region)[i],]) * tab_disj$weight[2])
#     
#     if(clus_numb2 > 0){
#       clus2 <- spdep::skater(df.mst2[,1:2],sdat2,clus_numb2-1,crit=20)
#       ccs2 <- factor(clus2$groups)
#       
#       m_opsf2 <- spatial_m_lsoa2 |>
#         st_as_sf() |>
#         mutate(ccs2 = ccs2)
#       
#       mclus2 <- m_opsf2 |>
#         group_by(ccs2) |>
#         summarise()
#       
#       new_polys[[i]] <- rbind(m_opsf1 |>
#                                 group_by(ccs1) |>
#                                 summarise(swing=weighted.mean(test,popvoting)) |> 
#                                 rename(new_clust = ccs1),
#                               m_opsf2 |>
#                                 group_by(ccs2) |>
#                                 summarise(swing=weighted.mean(test,popvoting)) |> 
#                                 rename(new_clust = ccs2))
#       
#       m_op <- ggplot() +
#         geom_sf(data=lso_dfsc2 |> filter(region==levels(df$region)[i]) |> st_as_sf(), aes(fill=test),colour=NA) +
#         scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(min_swing,max_swing)) +
#         geom_sf(data=df |> filter(region==levels(df$region)[i]), fill=NA, lwd=5, colour="black") +
#         labs(fill="Swing",
#              title = levels(df$region)[i],
#              subtitle = "Predicted swing by output area") +
#         coord_sf(datum=NA) +
#         theme_bw()
#       
#       m_cn <- ggplot(df |> filter(region==levels(df$region)[i])) + geom_sf(aes(fill=con_swing)) +
#         scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(min_swing,max_swing)) +
#         labs(fill="Swing",
#              title = levels(df$region)[i],
#              subtitle = "Swing by constituency") +
#         coord_sf(datum=NA) +
#         theme_bw()
#       
#       ###
#       m_opsf_temp <- as.data.frame(
#         rbind(m_opsf1 |> rename(ccs = ccs1),
#               m_opsf2 |> rename(ccs = ccs2))
#       ) |> 
#           st_as_sf()
#       
#       m_newbound <- ggplot() +
#         geom_sf(data=m_opsf_temp, aes(fill=test), lwd=0.1, colour=NA) +
#         scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(min_swing,max_swing)) +
#         geom_sf(data=mclus1, fill=NA,colour="black", lwd=1) +
#         geom_sf(data=mclus2, fill=NA,colour="black", lwd=1) +
#         labs(fill="Swing",
#              title = levels(df$region)[i],
#              subtitle = "New boundaries") +
#         coord_sf(datum=NA) +
#         theme_bw() 
#        
#       m_agg1 <- m_opsf1 |>
#         group_by(ccs1) |>
#         summarise(agg_swing = weighted.mean(test,popvoting))
#       
#       m_agg2 <- m_opsf2 |>
#         group_by(ccs2) |>
#         summarise(agg_swing = weighted.mean(test,popvoting))
#       
#       ###
#       m_agg_temp <- as.data.frame(
#         rbind(m_agg1 |> rename(ccs = ccs1),
#               m_agg2 |> rename(ccs = ccs2))
#       ) |> 
#           st_as_sf()
# 
#       p_m_agg <- ggplot() +
#         geom_sf(data=m_agg_temp, aes(fill=agg_swing)) +
#         scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(min_swing,max_swing)) +
#         labs(fill="Swing",
#              title = levels(df$region)[i],
#              subtitle = "New boundaries aggregated swing") +
#         coord_sf(datum=NA) +
#         theme_bw()
# 
#       b_list[[i]] <- ggarrange(m_op, m_newbound, m_cn, p_m_agg, nrow=2, ncol=2, common.legend = TRUE) 
#       
#     }else {
#       m_opsf2 <- spatial_m_lsoa2 |> st_as_sf()
#       mclus2 <- spatial_m_lsoa2 |> st_as_sf() |> mutate(ccs2=1) |> select(ccs2)
#       m_opsf2 <- spatial_m_lsoa2 |>
#         st_as_sf() |>
#         mutate(ccs2 = unique(mclus2$ccs2))
#       new_polys[[i]] <- rbind(m_opsf1 |>
#                                 group_by(ccs1) |>
#                                 summarise(swing=weighted.mean(test,popvoting)) |> 
#                                 rename(new_clust = ccs1),
#                               m_opsf2 |>
#                                 group_by(ccs2) |>
#                                 summarise(swing=weighted.mean(test,popvoting)) |> 
#                                 rename(new_clust = ccs2))
#       
#       m_op <- ggplot() +
#         geom_sf(data=lso_dfsc2 |> filter(region==levels(df$region)[i]) |> st_as_sf(), aes(fill=test),colour=NA) +
#         scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(min_swing,max_swing)) +
#         geom_sf(data=df |> filter(region==levels(df$region)[i]), fill=NA, lwd=5, colour="black") +
#         labs(fill="Swing",
#              title = levels(df$region)[i],
#              subtitle = "Predicted swing by output area") +
#         coord_sf(datum=NA) +
#         theme_bw()
#       
#       m_cn <- ggplot(df |> filter(region==levels(df$region)[i])) + geom_sf(aes(fill=con_swing)) +
#         scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(min_swing,max_swing)) +
#         labs(fill="Swing",
#              title = levels(df$region)[i],
#              subtitle = "Swing by constituency") +
#         coord_sf(datum=NA) +
#         theme_bw()
#  
#       ###
#       m_opsf_temp <- as.data.frame(
#         rbind(m_opsf1 |> rename(ccs = ccs1),
#               m_opsf2 |> rename(ccs = ccs2))
#       ) |> 
#           st_as_sf()
#       
#       m_newbound <- ggplot() +
#         geom_sf(data=m_opsf_temp, aes(fill=test), lwd=0.1, colour=NA) +
#         scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(min_swing,max_swing)) +
#         geom_sf(data=mclus1, fill=NA,colour="black", lwd=1) +
#         geom_sf(data=mclus2, fill=NA,colour="black", lwd=1) +
#         labs(fill="Swing",
#              title = levels(df$region)[i],
#              subtitle = "New boundaries") +
#         coord_sf(datum=NA) +
#         theme_bw()
#       
#       m_agg1 <- m_opsf1 |>
#         group_by(ccs1) |>
#         summarise(agg_swing = weighted.mean(test,popvoting))
#       
#       m_agg2 <- m_opsf2 |>
#         group_by(ccs2) |>
#         summarise(agg_swing = weighted.mean(test,popvoting))
# 
#       ###
#       m_agg_temp <- as.data.frame(
#         rbind(m_agg1 |> rename(ccs = ccs1),
#               m_agg2 |> rename(ccs = ccs2))
#       ) |> 
#           st_as_sf()
# 
#       p_m_agg <- ggplot() +
#         geom_sf(data=m_agg_temp, aes(fill=agg_swing)) +
#         scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(min_swing,max_swing)) +
#         labs(fill="Swing",
#              title = levels(df$region)[i],
#              subtitle = "New boundaries aggregated swing") +
#         coord_sf(datum=NA) +
#         theme_bw()
#      
#       b_list[[i]] <- ggarrange(m_op, m_newbound, m_cn, p_m_agg, nrow=2, ncol=2, common.legend = TRUE)
#     }
#   }
#   if (num_disj == 3)
#   {
#     # perform separate skater for each disjoint zone
#     spatial_m_lsoa1 <- spatial_m_lsoa[which(disjoint$comp.id==1),]
#     spatial_m_lsoa2 <- spatial_m_lsoa[which(disjoint$comp.id==2),]
#     spatial_m_lsoa3 <- spatial_m_lsoa[which(disjoint$comp.id==3),]
#     
#     nlist_output1 <- poly2nb(spatial_m_lsoa1)
#     nlist_output2 <- poly2nb(spatial_m_lsoa2)
#     nlist_output3 <- poly2nb(spatial_m_lsoa3)
#     
#     vars <- "test"
#     
#     sdat1 <- data.frame(spatial_m_lsoa1@data[,vars])
#     sdat2 <- data.frame(spatial_m_lsoa2@data[,vars])
#     sdat3 <- data.frame(spatial_m_lsoa3@data[,vars])
#     
#     # edge costs - dissimilarity between node and its neighbours
#     lcosts1 <- nbcosts(nlist_output1,sdat1)
#     lcosts2 <- nbcosts(nlist_output2,sdat2)
#     lcosts3 <- nbcosts(nlist_output3,sdat3)
#     
#     # make this into a weights object
#     # style is B to make sure cost values are not row-standardised
#     df.w1 <- nb2listw(nlist_output1,lcosts1,style = "B")
#     df.w2 <- nb2listw(nlist_output2,lcosts2,style = "B")
#     df.w3 <- nb2listw(nlist_output3,lcosts3,style = "B")
#     
#     # create minimum spanning tree
#     df.mst1 <- mstree(df.w1)
#     df.mst2 <- mstree(df.w2)
#     df.mst3 <- mstree(df.w3)
#     
#     # zone 1
#     clus_numb1 <- round(nrow(df[df$region==levels(df$region)[i],]) * tab_disj$weight[1])
#     clus_numb1 <- ifelse(clus_numb1==0,1,clus_numb1) # in case it is zero
#     
#     clus1 <- spdep::skater(df.mst1[,1:2],sdat1,clus_numb1-1,crit=20)
#     ccs1 <- factor(clus1$groups)
#     
#     m_opsf1 <- spatial_m_lsoa1 |>
#       st_as_sf() |>
#       mutate(ccs1 = ccs1)
#     
#     mclus1 <- m_opsf1 |>
#       group_by(ccs1) |>
#       summarise()
#     
#     # zone 2
#     
#     clus_numb2 <- round(nrow(df[df$region==levels(df$region)[i],]) * tab_disj$weight[2])
#     clus_numb2 <- ifelse(clus_numb2==0,1,clus_numb2) # in case it is zero
#     
#     clus2 <- spdep::skater(df.mst2[,1:2],sdat2,clus_numb2-1,crit=20)
#     ccs2 <- factor(clus2$groups)
#     
#     m_opsf2 <- spatial_m_lsoa2 |>
#       st_as_sf() |>
#       mutate(ccs2 = ccs2)
#     
#     mclus2 <- m_opsf2 |>
#       group_by(ccs2) |>
#       summarise()
#     
#     # zone 3
#     
#     clus_numb3 <- round(nrow(df[df$region==levels(df$region)[i],]) * tab_disj$weight[3])
#     clus_numb3 <- ifelse(clus_numb3==0,1,clus_numb3) # in case it is zero
#     
#     clus3 <- spdep::skater(df.mst3[,1:2],sdat3,clus_numb3-1,crit=20)
#     ccs3 <- factor(clus3$groups)
#     
#     m_opsf3 <- spatial_m_lsoa3 |>
#       st_as_sf() |>
#       mutate(ccs3 = ccs3)
#     
#     mclus3 <- m_opsf3 |>
#       group_by(ccs3) |>
#       summarise()
#     
#     new_polys[[i]] <- rbind(m_opsf1 |>
#                               group_by(ccs1) |>
#                               summarise(swing=weighted.mean(test,popvoting)) |> 
#                               rename(new_clust = ccs1),
#                             m_opsf2 |>
#                               group_by(ccs2) |>
#                               summarise(swing=weighted.mean(test,popvoting)) |> 
#                               rename(new_clust = ccs2),
#                             m_opsf3 |>
#                               group_by(ccs3) |>
#                               summarise(swing=weighted.mean(test,popvoting)) |> 
#                               rename(new_clust = ccs3))
#     
#     m_op <- ggplot() +
#       geom_sf(data=lso_dfsc2 |> filter(region==levels(df$region)[i]) |> st_as_sf(), aes(fill=test),colour=NA) +
#       scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(min_swing,max_swing)) +
#       geom_sf(data=df |> filter(region==levels(df$region)[i]), fill=NA, lwd=5, colour="black") +
#       labs(fill="Swing",
#            title = levels(df$region)[i],
#            subtitle = "Predicted swing by output area") +
#       coord_sf(datum=NA) +
#       theme_bw()
#     
#     m_cn <- ggplot(df |> filter(region==levels(df$region)[i])) + geom_sf(aes(fill=con_swing)) +
#       scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(min_swing,max_swing)) +
#       labs(fill="Swing",
#            title = levels(df$region)[i],
#            subtitle = "Swing by constituency") +
#       coord_sf(datum=NA) +
#       theme_bw()
#     
#       ###
#       m_opsf_temp <- as.data.frame(
#         rbind(m_opsf1 |> rename(ccs = ccs1),
#               m_opsf2 |> rename(ccs = ccs2),
#               m_opsf3 |> rename(ccs = ccs3))
#       ) |> 
#           st_as_sf()
#       
#       ###
#       m_clus_temp <- as.data.frame(
#         rbind(mclus1 |> rename(ccs = ccs1),
#               mclus2 |> rename(ccs = ccs2),
#               mclus3 |> rename(ccs = ccs3))
#       ) |> 
#           st_as_sf()
#       
#     m_newbound <- ggplot() +
#       geom_sf(data=m_opsf_temp, aes(fill=test), lwd=0.1, colour=NA) +
#       scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(min_swing,max_swing)) +
#       geom_sf(data=m_clus_temp, fill=NA,colour="black", lwd=1) +
#       labs(fill="Swing",
#            title = levels(df$region)[i],
#            subtitle = "New boundaries") +
#       coord_sf(datum=NA) +
#       theme_bw()
#    
#     m_agg1 <- m_opsf1 |>
#       group_by(ccs1) |>
#       summarise(agg_swing = weighted.mean(test,popvoting))
#     
#     m_agg2 <- m_opsf2 |>
#       group_by(ccs2) |>
#       summarise(agg_swing = weighted.mean(test,popvoting))
#     
#     m_agg3 <- m_opsf3 |>
#       group_by(ccs3) |>
#       summarise(agg_swing = weighted.mean(test,popvoting))
#     
#     ############
#     m_agg_temp <- as.data.frame(
#       rbind(m_agg1 |> rename(ccs = ccs1),
#             m_agg2 |> rename(ccs = ccs2),
#             m_agg3 |> rename(ccs = ccs3))
#       ) |> 
#           st_as_sf()
#     
#     p_m_agg <- ggplot() +
#       geom_sf(data=m_agg_temp, aes(fill=agg_swing)) +
#       scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, limits=c(min_swing,max_swing)) +
#       labs(fill="Swing",
#            title = levels(df$region)[i],
#            subtitle = "New boundaries aggregated swing") +
#       coord_sf(datum=NA) +
#       theme_bw()
#     
#     b_list[[i]] <- ggarrange(m_op, m_newbound, m_cn, p_m_agg, nrow=2, ncol=2, common.legend = TRUE)
#   }
#   
#   print(paste0("Completed plot: ", i))
# }

```


### Read results

```{r}

# saveRDS(b_list, "b_list.rds")
# saveRDS(new_polys, "new_polys.rds")

new_polys <- readRDS(here("data","new_polys.rds"))
# b_list <- readRDS(here("b_list.rds"))

new_polys_df <- rbind(new_polys[[1]],
                      new_polys[[2]],
                      new_polys[[3]],
                      new_polys[[4]],
                      new_polys[[5]],
                      new_polys[[6]],
                      new_polys[[7]],
                      new_polys[[8]],
                      new_polys[[9]],
                      new_polys[[10]],
                      new_polys[[11]]) |> 
  st_as_sf()

```


### Show results over OSM map


```{r, fig.height=12,fig.width=12}

# ggplot(new_polys_df) + 
#   geom_sf(aes(fill=swing),lwd=0.1) +
#       scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0, 
#                            limits=c(min(new_polys_df$swing),max(new_polys_df$swing))) +
#       labs(fill="Swing") +
#       coord_sf(datum=NA) +
#       theme_bw() 

new_polys_df2 <- new_polys_df |> 
  st_join(regions, join = st_intersects, largest=TRUE)

tmap_mode("view")
# tmap_mode("plot")

plotlayers_region <- function(region_name){
  df <- df |> select(constituency_name,everything())
  tm_shape(lso_dfsc2 |> filter(region=={{region_name}}), name = "LSOA level predictions") + 
    tm_fill(col="test", style='cont', palette="RdBu",alpha=0.7,midpoint = 0) + 
    tm_borders(lwd=0) +     
    tm_shape(new_polys_df2 |> filter(region=={{region_name}}), name = "new boundaries outline") + 
    tm_borders() +     
    tm_shape(df |> filter(region=={{region_name}}), name = "original constituencies outline") + 
    tm_borders() + 
    tm_shape(new_polys_df2 |> filter(region=={{region_name}}), name = "new boundaries filled") + 
    tm_fill(col="swing", style='cont', palette="RdBu",alpha=0.7,midpoint = 0) + 
    tm_borders(lwd=0.5) + 
    tm_shape(df |> filter(region=={{region_name}}), name = "original constituencies filled") + 
    tm_fill(col="con_swing", style='cont', palette="RdBu",alpha=0.7,midpoint = 0) + 
    tm_borders(lwd=0.5) + 
    tm_shape(regions, name = "region") + 
    tm_borders(lwd=1)
}

plotlayers_region("South East")

```


### Show results side by side with original


```{r, fig.height=12,fig.width=12}

# b_list[[1]]
# b_list[[2]]
# b_list[[3]]
# b_list[[4]]
# b_list[[5]]
# b_list[[6]]
# b_list[[7]]
# b_list[[8]]
# b_list[[9]]
# b_list[[10]]
# b_list[[11]]

```


### Comparing results

Comparing new predicted swings from constructed constituencies and original swings in original constituencies.

New constituency names, estimated swings, and the LSOA polygons are saved as file called `new_boundaries.rds`.

While the mean swing per region does not change, more constituencies have relatively high or low swings. Fewer have moderate / more closely contested swings.

By colour, light blue regions indicate a decrease of that swing frequency decreased, red regions indicate an increase.

```{r, fig.height=4, fig.width=8}

# new_boundaries <- lso_dfsc2 |>
#   st_join(new_polys_df, join = st_within, largest = TRUE)
# 
# new_boundaries$newcon <- paste0(new_boundaries$region, new_boundaries$new_clust)

fills <- c("new" = "red", "original" = "blue")
colours <- c("new" = "darkred", "original" = "darkblue")

# saveRDS(reconciled, "new_boundaries.rds")
new_boundaries <- readRDS(here("data","new_boundaries.rds"))

ggplot(new_boundaries) + 
  geom_density(aes(x=test, fill="new", colour="new")) + 
  geom_density(aes(x=swing, fill="original", colour="original"),alpha=0.5) + 
  scale_fill_manual(values = fills) + 
  scale_colour_manual(values = colours) + 
  geom_vline(xintercept = 0, colour="black") + 
  theme_bw() + 
  guides(fill="none") + 
  labs(colour="Boundaries")

```

The new constituency changes by region.

```{r, fig.height=8, fig.width=12}

ggplot(new_boundaries) + 
  geom_density(aes(x=test, fill="new", colour="new")) + 
  geom_density(aes(x=swing, fill="original", colour="original"),alpha=0.5) + 
  scale_fill_manual(values = fills) + 
  scale_colour_manual(values = colours) + 
  geom_vline(xintercept = 0, colour="black") + 
  theme_bw() + 
  guides(fill="none") + 
  labs(colour="Boundaries") + 
  facet_wrap(~region, scales = "free")

```

The new Merseyside constituencies...

```{r, fig.height=8, fig.width=12}

ggplot(new_boundaries |> filter(region=="Merseyside")) + 
  geom_density(aes(x=test, fill="new", colour="new")) + 
  geom_density(aes(x=swing, fill="original", colour="original"),alpha=0.5) + 
  scale_fill_manual(values = fills) + 
  scale_colour_manual(values = colours) + 
  geom_vline(xintercept = 0, colour="black") + 
  theme_bw() + 
  guides(fill="none") + 
  labs(colour="Boundaries") + 
  facet_wrap(~newcon, scales = "free")

```

























