---
title: "Alternate Regions"
author: "Kevin Horan"
execute: 
  echo: false
  warning: false
  message: false
  code-fold: false
  cache: false
toc: true
number-sections: true
format:
  pdf: default
editor: source
bibliography: references.bib
---

```{r, warning=FALSE, message=FALSE}

# install.packages("devtools")
# devtools::install_github("m-clark/gammit")

packages <- c(
  "MASS",
  "tidyverse",
  "sf",
  "tmap",
  "here",
  "spdep", # areal data
  "grid",
  "GWmodel",
  "kableExtra",
  "cowplot",
  "parlitools",
  "corrplot",
  "cartogram",
  "lme4",
  "mgcv",
  "ggfortify",
  "ggforce", # has geom_circle
  "gridExtra",
  "car",
  "rgeoda", # for LISA
  "ggpubr",
  "ggrepel",
  "ggpointdensity",
  "ggalt", # for geom_encircle
  "ggsflabel", # has repel labels for sf
  "viridis",
  "spatialreg",
  "rgdal",
  "rgeos",
  "randomForest",
  "broom",
  "patchwork",
  "broom.mixed", # extract tidy output
  "merTools", # with plot functions
  "DiagrammeR", # mermaid
  "gammit" # for pulling out ran and fixed effs
  )


# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
  install.packages(packages[!installed_packages])
}

# Packages loading
invisible(lapply(packages, library, character.only = TRUE))

options(kableExtra.latex.load_packages = TRUE)

tmap_mode("plot")
rm(list=ls())

```

```{r}

# avoid conflict with dplyr and MASS::select
select <- dplyr::select

set.seed(123)

```

```{r, warning=FALSE, message=FALSE}

df <- readRDS("/Users/kevinhoran/Library/CloudStorage/OneDrive-MaynoothUniversity/swing_project/data/df.rds") |> 
  mutate(degree_educated = degree,
         professionals = industry_professional,
         younger_adults = age_18_to_19 + age_20_to_24 + age_25_to_29 + age_30_to_44,
         english_speaking = english_all,
         single_ethnicity_household = 100 - ethnicity_mixed,
         health_not_good = health_fair + health_bad + health_very_bad,
         deprived = deprived_1 + deprived_2 + deprived_3,
         white = ethnicity_white,
         christian = christian,
         own_home = house_owned,
         no_car = cars_none,
         density = density,
         region = as.character(region),
         region = factor(ifelse(county == "Merseyside", "Merseyside", region)),
         region = factor(region)) |> 
  st_as_sf() |> 
  st_transform(crs=27700)

hex <- west_hex_map
df_hex <- df |> 
  st_drop_geometry() |> 
  inner_join(hex |> select(-"constituency_name"), #  no letter case confusion
             by = c("ons_const_id"="gss_code")) |> 
  st_as_sf()

hex_regions <- df_hex |> 
  group_by(region) |> 
  summarise() |> 
  st_as_sf()

regions <- df |> group_by(region) |> 
  summarise() |> 
  st_as_sf() |> 
  st_transform(crs=27700)


vardf <- data.frame(variable = c("degree_educated",
               "professionals",
               "younger_adults",
               "english_speaking",
               "single_ethnicity_household",
               "deprived",
               "white",
               "christian",
               "own_home",
               "no_car"))

var_justification <- data.frame(
  variable = c("degree_educated",
               "professionals",
               "younger_adults",
               "english_speaking",
               "single_ethnicity_household",
               "deprived",
               "white",
               "christian",
               "own_home",
               "no_car"),
  justification = c(rep("post-industrial / knowledge economy",3),
                    rep("diversity / values / outcomes",5),
                    rep("metropolitan / 'big-city'",2)),
  jcolour = c(rep("navyblue",3),
                    rep("firebrick4",5),
                    rep("darkgreen",2))
)


# scale the variables to better judge relative strength of effects
df_scaled <- df |> 
  st_drop_geometry() |> 
  select(degree_educated,
    professionals,
    younger_adults,
    english_speaking,
    single_ethnicity_household,
    health_not_good,
    white,
    christian,
    own_home,
    no_car) |> 
  scale() |> 
  as.data.frame() |> 
  mutate(con_swing=df$con_swing,
         region=df$region)


df_scaled_sf <- df_scaled |> 
  mutate(constituency_name = df$constituency_name, 
         geometry = df$geometry) |> 
  st_as_sf()

```

## Clustering using `skater` algorithm

-   Rather than the official regions of England and Wales, are there different divisions which could be made which are more internally homogeneous and will lead to higher within-cluster explanation of variance.

These alternative divisions of England an Wales are based on inter-relationships between swing and the four covariates, subject to:

-   contiguity,

-   minimum of 10 constituencies per region,

-   increasing from 2 to 12 regions.

\clearpage
### Check various results

Starting with one division, and increasing to 12.

```{r, fig.width=6, fig.height=6}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

# couldn't get redcap clustering algorithm to work...

df_scaled_sf <- df_scaled |> 
  mutate(constituency_name = df$constituency_name, 
         geometry = df$geometry) |> 
  st_as_sf() |> 
  st_transform(crs=27700)

df_scaled_sf |> st_intersects() |> 
  map_int(~length(.x)) %>% {
    which(. == 1)} -> temp
bufs <- rep(0,nrow(df_scaled_sf))
bufs[temp] <- 2000 # just enough to give Isle of Wight neighbours
nlistconst <- df_scaled_sf |> st_buffer(dist=bufs) |> 
  st_intersects() |> imap(~setdiff(.x,.y))
names(nlistconst) <- df_scaled_sf$constituency_name
class(nlistconst) <- "nb"

dat <- df |> 
  st_transform(crs=27700) |> 
  as_Spatial()
vars <- c("con_swing",
          "younger_adults",
          "white",
          "health_not_good",
          "degree_educated"
)

# use raw scaled values for clustering:
sdat <- data.frame(dat@data[,vars]) |> 
  scale()

# or to use covariates' relationship with con_swing as basis for clustering:
sdat1 <- matrix(nrow = 571,ncol = 5)
sdat1[,2] <- sdat[,1]/sdat[,2]
sdat1[,3] <- sdat[,1]/sdat[,3]
sdat1[,4] <- sdat[,1]/sdat[,4]
sdat1[,5] <- sdat[,1]/sdat[,5]
sdat1[,1] <- sdat[,1]

sdat <- scale(sdat1)


# edge costs - dissimilarity between node and its neighbours
lcosts <- nbcosts(nlistconst,sdat)

# make this into a weights object
# style is B to make sure cost values are not row-standardised
df.w <- nb2listw(nlistconst,lcosts,style = "B")

# create minimum spanning tree
df.mst <- mstree(df.w)

# plot(df.mst,coordinates(dat),col="blue",
#       cex.lab=0.7)
# plot(dat,border=gray(.5),add=TRUE)

# skater function for contiguity-constrained cluster

clus_list <- list()
clus_numb <- seq(1,12)
for (i in 1:length(clus_numb)){
  clus <- spdep::skater(df.mst[,1:2],sdat,clus_numb[i],crit=10)
  ccs <- factor(clus$groups)
  
  df$ccs <- ccs
  clus_list[[i]] <- ggplot() + 
    geom_sf(data=df, aes(fill=ccs), lwd=0.1, colour=NA) + 
    geom_sf(data=regions, fill=NA, lwd=0.1, colour="black") + 
    scale_fill_brewer(palette = "Set3") + 
    coord_sf(datum=NA) + 
    labs(fill="cluster") + 
    guides(fill="none") + 
    theme_bw()
}

ggarrange(clus_list[[1]],
          clus_list[[2]],
          clus_list[[3]],
          clus_list[[4]],
          clus_list[[5]],
          clus_list[[6]],
          clus_list[[7]],
          clus_list[[8]],
          clus_list[[9]],
          clus_list[[10]],
          clus_list[[11]],
          clus_list[[12]],nrow=4, ncol=3)

```

\clearpage

### Select cluster number for model

```{r}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

total_clusters <- 12
tc <- total_clusters-1

clusts <- spdep::skater(df.mst[,1:2],sdat,tc,crit = 10)

df_clus <- df |> st_as_sf() |> 
  select(geometry) |> 
  mutate(clus = clusts$groups) |> 
  st_transform(crs=27700)

clusters <- df_clus |> 
  group_by(clus) |> 
  summarise()

```

```{r}

# import cities
# then very convoluted way to ascribe names to new regions
# based on if they feature the following cities...

cities <- read.csv("/Users/kevinhoran/Library/CloudStorage/OneDrive-MaynoothUniversity/swing_project/data/worldcities.csv") |> 
  filter(country == "United Kingdom",
         population > 150000,
         city != "Glasgow",
         city != "Edinburgh",
         city != "Belfast",
         city != "Westminster",
         city != "Aberdeen") |> 
  st_as_sf(coords = c("lng","lat"), crs=4326) |> 
  st_transform(crs=27700)

cities$city[cities$city=="Caerdydd"] <- "Cardiff"
cities$city[cities$city=="Abertawe"] <- "Swansea"

clusters$cluster <- rep(0,12)

clusters$cluster[st_covers(clusters,cities[cities$city=="Liverpool",]) |> 
  data.frame() |> 
  select(row.id) |> 
  as.integer()] <- "Merseyside"

clusters$cluster[st_covers(clusters,cities[cities$city=="Sunderland",]) |> 
  data.frame() |> 
  select(row.id) |> 
  as.integer()] <- "Durham / Tyne and Wear"

clusters$cluster[st_covers(clusters,cities[cities$city=="York",]) |> 
  data.frame() |> 
  select(row.id) |> 
  as.integer()] <- "North England / Wales"

clusters$cluster[st_covers(clusters,cities[cities$city=="Barnsley",]) |> 
  data.frame() |> 
  select(row.id) |> 
  as.integer()] <- "South Yorkshire / South Humberside"

clusters$cluster[st_covers(clusters,cities[cities$city=="Wolverhampton",]) |> 
  data.frame() |> 
  select(row.id) |> 
  as.integer()] <- "West Midlands"

clusters$cluster[st_covers(clusters,cities[cities$city=="Coventry",]) |> 
  data.frame() |> 
  select(row.id) |> 
  as.integer()] <- "East Midlands"

clusters$cluster[st_covers(clusters,cities[cities$city=="Oxford",]) |> 
  data.frame() |> 
  select(row.id) |> 
  as.integer()] <- "Mid / South / Lincolnshire"

clusters$cluster[st_covers(clusters,cities[cities$city=="Norwich",]) |> 
  data.frame() |> 
  select(row.id) |> 
  as.integer()] <- "Norfolk"

clusters$cluster[st_covers(clusters,cities[cities$city=="Ipswich",]) |> 
  data.frame() |> 
  select(row.id) |> 
  as.integer()] <- "Suffolk / Essex"

clusters$cluster[st_covers(clusters,cities[cities$city=="Plymouth",]) |> 
  data.frame() |> 
  select(row.id) |> 
  as.integer()] <- "South West"

clusters$cluster[st_covers(clusters,cities[cities$city=="London",]) |> 
  data.frame() |> 
  select(row.id) |> 
  as.integer()] <- "London"

clusters$cluster[clusters$cluster==0] <- "Kent"

clusters$cluster <-factor(clusters$cluster)

# to test the clusters have been labelled aprropriately, inspect...
# ggplot(clusters) + geom_sf() + geom_sf_label(aes(label=new))


```

### Swing 2017-19 model by cluster

```{r, fig.width=12, fig.height=12}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

nlistclus <- clusters %>% st_touches()
names(nlistclus) <- levels(clusters$cluster)
df_sc_clus <- df_scaled_sf |> 
  st_join(clusters, largest=TRUE)

mm1719b <- gam(con_swing ~
               degree_educated +
               younger_adults +
               health_not_good +
               white + 
               #no_car +
               s(degree_educated,cluster, bs="re") +
               s(younger_adults,cluster, bs="re") +
               s(health_not_good,cluster, bs="re") +
               s(white,cluster, bs="re") +
               #s(no_car,cluster, bs="re") +
               s(cluster,bs='mrf',xt=list(nb=nlistclus)),
             data=df_sc_clus, method="REML")

summary(mm1719b)

temp <- tibble(
  degree_educated=rep(1,nrow(df_scaled_sf)),
  younger_adults=rep(1,nrow(df_scaled_sf)),
  health_not_good=rep(1,nrow(df_scaled_sf)),
  white=rep(1,nrow(df_scaled_sf)),
  no_car=rep(1,nrow(df_scaled_sf)),
  cluster=df_sc_clus$cluster)


mm1719bdf <- predict(mm1719b,newdata = temp,type = "terms", se.fit = TRUE) |> 
  as.data.frame() |> 
  cbind(df_sc_clus |> select(geometry,
                     cluster)) |> 
  as.data.frame() |> 
  st_as_sf() |> 
  st_transform(crs=27700)

mm1719bdf_reg <- clusters |> 
  left_join(mm1719bdf |> st_drop_geometry())

ggplot(mm1719bdf_reg) + 
  geom_sf(data=mm1719bdf_reg, aes(fill=cluster),lwd=0.3, colour="black") + 
  coord_sf(datum=NA) + 
  geom_sf(data=regions, fill=NA, lwd=0.1) + 
  coord_sf(datum=NA) + 
  scale_fill_brewer(palette = "Set3") + 
  coord_sf(datum=NA) + 
  geom_sf(data=cities,shaoe=21, colour="firebrick4") + 
  geom_sf_label_repel(data=cities, aes(label=city), size=2.5) + 
  labs(x="",
       y="",
       fill="Approximate Cluster Location") + 
  theme_bw() +
  theme(legend.position='bottom') + 
  labs(title = "12 Clusters from skater algorithm")


```

```{r, fig.width=12, fig.height=4}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

p1_mm1719b <- ggplot() + 
  geom_sf(data=mm1719bdf_reg,aes(fill=`fit.s.cluster.`), lwd=0.3, colour="black") + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  coord_sf(datum=NA) + 
  geom_sf(data=regions, fill=NA, lwd=0.01) + 
  coord_sf(datum=NA) + 
  theme_bw() +
  labs(fill = "geographic\neffect",
       title = "Random neighbourhood effect",
       subtitle = "by cluster")

mm1719bdf_unique <- mm1719bdf |> 
  st_drop_geometry() |> 
  group_by(cluster) |> 
  unique()

fe_mm1719b <- extract_fixed(mm1719b, ci_level = 0.95, digits = 3) |>  
  mutate(term = fct_reorder(term, value))

re_mm1719b <- extract_ranef(mm1719b, ci_level = 0.95, digits = 3) |>  
  mutate(term = fct_reorder(effect, value))


fe_mm1719b$swingto <- case_when(fe_mm1719b$value>0 ~ "Conservative",
                               TRUE ~ "Labour")

p2_mm1719b <- ggplot(fe_mm1719b, aes(x=value, y=term,
                 xmin=lower_2.5,
                 xmax=upper_97.5, 
                 fill=swingto)) + 
  geom_errorbar(lwd=1) + 
  geom_point(aes(colour=swingto), shape=21, size=3) + 
    scale_fill_manual(breaks = c("Conservative", "Labour"),
                     values = c("darkblue", "firebrick4")) +
    scale_colour_manual(breaks = c("Conservative", "Labour"),
                     values = c("darkblue", "firebrick4")) +
  geom_vline(xintercept = 0, colour="red") + 
  theme_bw() + 
  guides(fill="none",
         colour="none") + 
  labs(x="coefficient effect", 
       y=NULL,
       title = "Fixed effects from mixed model",
       subtitle = paste0("Butler swing to Conservatives by 5 demographic composition variables. \nAIC: ",
                         round(AIC(mm1719b))))

ggarrange(p2_mm1719b,p1_mm1719b)

```

```{r}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

pvals <- tidy(mm1719b) |> 
  select(p.value) |> 
  round(3) |> 
  rbind("-") |> 
  data.frame()

gratia::variance_comp(mm1719b) |> 
  data.frame() |> 
  mutate(`total variance` = sum(variance),
         `variance (%)` = round(100*variance/`total variance`,2),
         variance= round(variance,2),
         `cum. variance (%)` = round(cumsum(`variance (%)`),1),
         `p-vals (F-test)` = pvals) |> 
  select(component,variance,`variance (%)`,`cum. variance (%)`,`p-vals (F-test)`) |> 
  kbl() |> 
  kable_classic(full_width = F) |> 
  row_spec(4, hline_after = T) |> 
  row_spec(5, hline_after = T, background = "#DAF7A6") |> 
  row_spec(6, background = "#F8BBC2") |> 
  row_spec(0, bold=T)

```

```{r}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

# for showing any declared number of clusters (and therefore unlabelled) 

# mm_plot_list_clusters <- list()
# i=1
# for (var in levels(df_sc_clus$clus)){
#   mmtemp <- re_mm1719b[re_mm1719b$group==levels(df_sc_clus$clus)[i],]
#   mmtemp$swingto <- case_when(mmtemp$value>0 ~ "Conservative",
#                               TRUE ~ "Labour")
#   mm_plot_list_clusters[[i]] <- ggplot(mmtemp, aes(x=value, y=effect,
#                                                    xmin=lower_2.5,
#                                                    xmax=upper_97.5, 
#                                                    fill=swingto,
#                                                    colour=swingto)) + 
#     geom_errorbar(lwd=0.5, colour="black") + 
#     geom_point(shape=21, size=3) + 
#     scale_fill_manual(breaks = c("Conservative", "Labour"),
#                      values = c("darkblue", "firebrick4")) +
#     scale_colour_manual(breaks = c("Conservative", "Labour"),
#                      values = c("darkblue", "firebrick4")) +
#     geom_vline(xintercept = 0, colour="red") + 
#     theme_bw() + 
#     theme(plot.title =element_text(size=10, face='bold'),
#           plot.subtitle =element_text(size=8)) + 
#     labs(x="coefficient effect", 
#          y=NULL, 
#          title = levels(df_sc_clus$clus)[i]) + 
#     guides(fill="none",
#            colour="none")
#   
#   i= i+1
# }

```

```{r, fig.width=4,fig.height=3}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

#mm_plot_list_clusters

```

### Specifically for 12 clusters

```{r}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

mm_plot_list_clusters <- list()
i=1
for (var in levels(clusters$cluster)){
  mmtemp <- re_mm1719b[re_mm1719b$group==levels(df_sc_clus$cluster)[i],]
  mmtemp$swingto <- case_when(mmtemp$value>0 ~ "Conservative",
                               TRUE ~ "Labour")
  mm_plot_list_clusters[[i]] <- ggplot(mmtemp, aes(x=value, y=effect,
                                                        xmin=lower_2.5,
                                                        xmax=upper_97.5, 
                                                        fill=swingto,colour=swingto)) + 
    geom_errorbar(lwd=0.5, colour="black") + 
    geom_point(shape=21, size=3) +
    scale_fill_manual(breaks = c("Conservative", "Labour"),
                     values = c("darkblue", "firebrick4")) +
    scale_colour_manual(breaks = c("Conservative", "Labour"),
                     values = c("darkblue", "firebrick4")) +
    geom_vline(xintercept = 0, colour="red") + 
    theme_bw() + 
    theme(plot.title =element_text(size=10, face='bold'),
          plot.subtitle =element_text(size=8)) + 
    labs(x="coefficient effect", 
         y=NULL, 
         title = clusters$cluster[i]) + 
    guides(fill="none",
           colour="none")
  
  i= i+1
}

```

```{r, fig.width=10,fig.height=8}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

(plot_spacer()|plot_spacer()|mm_plot_list_clusters[[6]]|plot_spacer()) / 
  (plot_spacer()|mm_plot_list_clusters[[3]]|mm_plot_list_clusters[[2]]|plot_spacer()) / 
  (mm_plot_list_clusters[[10]]|mm_plot_list_clusters[[12]]|mm_plot_list_clusters[[7]]|mm_plot_list_clusters[[11]]) /
  (plot_spacer()|mm_plot_list_clusters[[5]]|mm_plot_list_clusters[[4]]|mm_plot_list_clusters[[1]]) / 
  (mm_plot_list_clusters[[9]]|plot_spacer()|plot_spacer()|mm_plot_list_clusters[[8]]) +
  plot_annotation(
    title = "Random effects from mixed model",
    subtitle = "4 variables, by 12 skater clusters",
    theme = theme(plot.title = element_text(size = 16))
  )

```

```{r}

### Predict results using cluster model


#| code-fold: false
#| message: false
#| warning: false
#| echo: false

# op_scaled <- op_scaled |>
#   st_as_sf() |>
#   st_transform(crs=27700)
# 
# op_scaled_cluster <- st_join(op_scaled, clusters, largest=TRUE)
# 
# saveRDS(op_scaled_cluster, "op_scaled_cluster.rds")

```

```{r}

# op_scaled_cluster <- readRDS(here("data","op_scaled_cluster.rds"))

```

```{r, fig.width=12, fig.height=12}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

# test1 <- predict(mm1719b, op_scaled_cluster)
# 
# op_scaled_cluster$test <- test1
# 
# l_clus_op <- ggplot() + 
#   geom_sf(data=op_scaled_cluster |> filter(cluster=="London") |> st_as_sf(), aes(fill=test),colour=NA) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   geom_sf(data=df_sc_clus |> filter(cluster=="London"), fill=NA, lwd=5, colour="black") +
#   labs(fill="Swing",
#        title = "London",
#        subtitle = "Predicted swing by output area") + 
#   theme_bw()
# 
# l_clus_cn <- ggplot(df_sc_clus |> filter(cluster=="London")) + geom_sf(aes(fill=con_swing)) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   labs(fill="Swing",
#        title = "London",
#        subtitle = "Swing by constituency") + 
#   theme_bw()
# 
# dtw_clus_op <- ggplot() + 
#   geom_sf(data=op_scaled_cluster |> filter(cluster=="Durham / Tyne and Wear") |> st_as_sf(), aes(fill=test),colour=NA) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   geom_sf(data=df_sc_clus |> filter(cluster=="Durham / Tyne and Wear"), fill=NA, lwd=5, colour="black") +
#   labs(fill="Swing",
#        title = "Durham / Tyne and Wear",
#        subtitle = "Predicted swing by output area") + 
#   theme_bw()
# 
# dtw_clus_cn <- ggplot(df_sc_clus |> filter(cluster=="Durham / Tyne and Wear")) + geom_sf(aes(fill=con_swing)) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   labs(fill="Swing",
#        title = "Durham / Tyne and Wear",
#        subtitle = "Swing by constituency") + 
#   theme_bw()
# 
# em_clus_op <- ggplot() + 
#   geom_sf(data=op_scaled_cluster |> filter(cluster=="East Midlands") |> st_as_sf(), aes(fill=test),colour=NA) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   geom_sf(data=df_sc_clus |> filter(cluster=="East Midlands"), fill=NA, lwd=5, colour="black") +
#   labs(fill="Swing",
#        title = "East Midlands",
#        subtitle = "Predicted swing by output area") + 
#   theme_bw()
# 
# em_clus_cn <- ggplot(df_sc_clus |> filter(cluster=="East Midlands")) + geom_sf(aes(fill=con_swing)) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   labs(fill="Swing",
#        title = "East Midlands",
#        subtitle = "Swing by constituency") + 
#   theme_bw()
# 
# k_clus_op <- ggplot() + 
#   geom_sf(data=op_scaled_cluster |> filter(cluster=="Kent") |> st_as_sf(), aes(fill=test),colour=NA) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   geom_sf(data=df_sc_clus |> filter(cluster=="Kent"), fill=NA, lwd=5, colour="black") +
#   labs(fill="Swing",
#        title = "Kent",
#        subtitle = "Predicted swing by output area") + 
#   theme_bw()
# 
# k_clus_cn <- ggplot(df_sc_clus |> filter(cluster=="Kent")) + geom_sf(aes(fill=con_swing)) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   labs(fill="Swing",
#        title = "Kent",
#        subtitle = "Swing by constituency") + 
#   theme_bw()
# 
# m_clus_op <- ggplot() + 
#   geom_sf(data=op_scaled_cluster |> filter(cluster=="Merseyside") |> st_as_sf(), aes(fill=test),colour=NA) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   geom_sf(data=df_sc_clus |> filter(cluster=="Merseyside"), fill=NA, lwd=5, colour="black") +
#   labs(fill="Swing",
#        title = "Merseyside",
#        subtitle = "Predicted swing by output area") + 
#   theme_bw()
# 
# m_clus_cn <- ggplot(df_sc_clus |> filter(cluster=="Merseyside")) + geom_sf(aes(fill=con_swing)) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   labs(fill="Swing",
#        title = "Merseyside",
#        subtitle = "Swing by constituency") + 
#   theme_bw()
# 
# msl_clus_op <- ggplot() + 
#   geom_sf(data=op_scaled_cluster |> filter(cluster=="Mid / South / Lincolnshire") |> st_as_sf(), aes(fill=test),colour=NA) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   geom_sf(data=df_sc_clus |> filter(cluster=="Mid / South / Lincolnshire"), fill=NA, lwd=5, colour="black") +
#   labs(fill="Swing",
#        title = "Mid / South / Lincolnshire",
#        subtitle = "Predicted swing by output area") + 
#   theme_bw()
# 
# msl_clus_cn <- ggplot(df_sc_clus |> filter(cluster=="Mid / South / Lincolnshire")) + geom_sf(aes(fill=con_swing)) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   labs(fill="Swing",
#        title = "Mid / South / Lincolnshire",
#        subtitle = "Swing by constituency") + 
#   theme_bw()
# 
# n_clus_op <- ggplot() + 
#   geom_sf(data=op_scaled_cluster |> filter(cluster=="Norfolk") |> st_as_sf(), aes(fill=test),colour=NA) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   geom_sf(data=df_sc_clus |> filter(cluster=="Norfolk"), fill=NA, lwd=5, colour="black") +
#   labs(fill="Swing",
#        title = "Norfolk",
#        subtitle = "Predicted swing by output area") + 
#   theme_bw()
# 
# n_clus_cn <- ggplot(df_sc_clus |> filter(cluster=="Norfolk")) + geom_sf(aes(fill=con_swing)) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   labs(fill="Swing",
#        title = "Norfolk",
#        subtitle = "Swing by constituency") + 
#   theme_bw()
# 
# new_clus_op <- ggplot() + 
#   geom_sf(data=op_scaled_cluster |> filter(cluster=="North England / Wales") |> st_as_sf(), aes(fill=test),colour=NA) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   geom_sf(data=df_sc_clus |> filter(cluster=="North England / Wales"), fill=NA, lwd=5, colour="black") +
#   labs(fill="Swing",
#        title = "North England / Wales",
#        subtitle = "Predicted swing by output area") + 
#   theme_bw()
# 
# new_clus_cn <- ggplot(df_sc_clus |> filter(cluster=="North England / Wales")) + geom_sf(aes(fill=con_swing)) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   labs(fill="Swing",
#        title = "North England / Wales",
#        subtitle = "Swing by constituency") + 
#   theme_bw()
# 
# sw_clus_op <- ggplot() + 
#   geom_sf(data=op_scaled_cluster |> filter(cluster=="South West") |> st_as_sf(), aes(fill=test),colour=NA) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   geom_sf(data=df_sc_clus |> filter(cluster=="South West"), fill=NA, lwd=5, colour="black") +
#   labs(fill="Swing",
#        title = "South West",
#        subtitle = "Predicted swing by output area") + 
#   theme_bw()
# 
# sw_clus_cn <- ggplot(df_sc_clus |> filter(cluster=="South West")) + geom_sf(aes(fill=con_swing)) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   labs(fill="Swing",
#        title = "South West",
#        subtitle = "Swing by constituency") + 
#   theme_bw()
# 
# sysh_clus_op <- ggplot() + 
#   geom_sf(data=op_scaled_cluster |> filter(cluster=="South Yorkshire / South Humberside") |> st_as_sf(), aes(fill=test),colour=NA) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   geom_sf(data=df_sc_clus |> filter(cluster=="South Yorkshire / South Humberside"), fill=NA, lwd=5, colour="black") +
#   labs(fill="Swing",
#        title = "South Yorkshire / South Humberside",
#        subtitle = "Predicted swing by output area") + 
#   theme_bw()
# 
# sysh_clus_cn <- ggplot(df_sc_clus |> filter(cluster=="South Yorkshire / South Humberside")) + geom_sf(aes(fill=con_swing)) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   labs(fill="Swing",
#        title = "South Yorkshire / South Humberside",
#        subtitle = "Swing by constituency") + 
#   theme_bw()
# 
# se_clus_op <- ggplot() + 
#   geom_sf(data=op_scaled_cluster |> filter(cluster=="Suffolk / Essex") |> st_as_sf(), aes(fill=test),colour=NA) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   geom_sf(data=df_sc_clus |> filter(cluster=="Suffolk / Essex"), fill=NA, lwd=5, colour="black") +
#   labs(fill="Swing",
#        title = "Suffolk / Essex",
#        subtitle = "Predicted swing by output area") + 
#   theme_bw()
# 
# se_clus_cn <- ggplot(df_sc_clus |> filter(cluster=="Suffolk / Essex")) + geom_sf(aes(fill=con_swing)) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   labs(fill="Swing",
#        title = "Suffolk / Essex",
#        subtitle = "Swing by constituency") + 
#   theme_bw()
# 
# wm_clus_op <- ggplot() + 
#   geom_sf(data=op_scaled_cluster |> filter(cluster=="West Midlands") |> st_as_sf(), aes(fill=test),colour=NA) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   geom_sf(data=df_sc_clus |> filter(cluster=="West Midlands"), fill=NA, lwd=5, colour="black") +
#   labs(fill="Swing",
#        title = "West Midlands",
#        subtitle = "Predicted swing by output area") + 
#   theme_bw()
# 
# wm_clus_cn <- ggplot(df_sc_clus |> filter(cluster=="West Midlands")) + geom_sf(aes(fill=con_swing)) + 
#   scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
#   labs(fill="Swing",
#        title = "West Midlands",
#        subtitle = "Swing by constituency") + 
#   theme_bw()

```

```{r, fig.width=12, fig.height=12}
#| code-fold: false
#| message: false
#| warning: false
#| echo: false

# ggarrange(l_clus_op, l_clus_cn, nrow=2, common.legend = TRUE)
# ggarrange(dtw_clus_op, dtw_clus_cn, nrow=2, common.legend = TRUE)
# ggarrange(em_clus_op, em_clus_cn, nrow=2, common.legend = TRUE)
# ggarrange(k_clus_op, k_clus_cn, nrow=2, common.legend = TRUE)
# ggarrange(m_clus_op, m_clus_cn, nrow=2, common.legend = TRUE)
# ggarrange(msl_clus_op, msl_clus_cn, nrow=2, common.legend = TRUE)
# ggarrange(n_clus_op, n_clus_cn, nrow=2, common.legend = TRUE)
# ggarrange(new_clus_op, new_clus_cn, nrow=2, common.legend = TRUE)
# ggarrange(sw_clus_op, sw_clus_cn, nrow=2, common.legend = TRUE)
# ggarrange(sysh_clus_op, sysh_clus_cn, nrow=2, common.legend = TRUE)
# ggarrange(se_clus_op, se_clus_cn, nrow=2, common.legend = TRUE)
# ggarrange(wm_clus_op, wm_clus_cn, nrow=2, common.legend = TRUE)

```
