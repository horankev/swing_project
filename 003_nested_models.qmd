---
title: "Model generation with nested structure"
author: "Kevin Horan"
execute: 
  echo: false
  warning: false
  message: false
  code-fold: false
  cache: false
toc: true
number-sections: false
format:
  pdf: default
  html: 
    code-fold: true
    html-math-method: katex
editor: source
---

```{r, warning=FALSE, message=FALSE}

# install.packages("devtools")
# devtools::install_github("m-clark/gammit")

packages <- c(
  "MASS",
  "tidyverse",
  "sf",
  "tmap",
  "here",
  "spdep", # areal data
  "grid",
  "GWmodel",
  "gstat",
  "kableExtra",
  "cowplot",
  "cartogram",
  "parlitools",
  "corrplot",
  "lme4",
  "mgcv",
  "ggfortify",
  "ggforce", # has geom_circle
  "gridExtra",
  "car",
  "rgeoda", # for LISA
  "ggpubr",
  "ggrepel",
  "ggpointdensity",
  "ggalt", # for geom_encircle
  "ggsflabel", # has repel labels for sf
  "viridis",
  "spatialreg",
  "rgdal",
  "rgeos",
  "randomForest",
  "broom",
  "patchwork",
  "nlme",
  "PieGlyph",
  "paletteer", # easy access to many palettes (eg >10 discrete colours...)
  "broom.mixed", # extract tidy output
  "merTools", # with plot functions
  "DiagrammeR", # mermaid
  "gammit" # for pulling out ran and fixed effs
  )


# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
  install.packages(packages[!installed_packages])
}

# Packages loading
invisible(lapply(packages, library, character.only = TRUE))

options(kableExtra.latex.load_packages = TRUE)

tmap_mode("plot")
rm(list=ls())

```

```{r}

# avoid conflict with dplyr and MASS::select
select <- dplyr::select

set.seed(123)

```

```{r, warning=FALSE, message=FALSE}

df <- readRDS("/Users/kevinhoran/Library/CloudStorage/OneDrive-MaynoothUniversity/swing_project/data/df.rds") |> 
  mutate(degree_educated = degree,
         professionals = industry_professional,
         younger_adults = age_18_to_19 + age_20_to_24 + age_25_to_29 + age_30_to_44,
         english_speaking = english_all,
         single_ethnicity_household = 100 - ethnicity_mixed,
         health_not_good = health_fair + health_bad + health_very_bad,
         deprived = deprived_1 + deprived_2 + deprived_3,
         white = ethnicity_white,
         christian = christian,
         own_home = house_owned,
         no_car = cars_none,
         density = density,
         county = as.character(county),
         county = factor(county)) |> 
  st_as_sf() |> 
  st_transform(crs=27700)

hex <- west_hex_map
df_hex <- df |> 
  st_drop_geometry() |> 
  inner_join(hex |> select(-"constituency_name"), #  no letter case confusion
             by = c("ons_const_id"="gss_code")) |> 
  st_as_sf()

hex_regions <- df_hex |> 
  group_by(region) |> 
  summarise() |> 
  st_as_sf()

regions <- df |> group_by(region) |> 
  summarise() |> 
  st_as_sf() |> 
  st_transform(crs=27700)

counties <- df |> group_by(county) |> 
  summarise() |> 
  st_as_sf() |> 
  st_transform(crs=27700)

vardf <- data.frame(variable = c("degree_educated",
               "professionals",
               "younger_adults",
               "english_speaking",
               "single_ethnicity_household",
               "deprived",
               "white",
               "christian",
               "own_home",
               "no_car"))

var_justification <- data.frame(
  variable = c("degree_educated",
               "professionals",
               "younger_adults",
               "english_speaking",
               "single_ethnicity_household",
               "deprived",
               "white",
               "christian",
               "own_home",
               "no_car"),
  justification = c(rep("post-industrial / knowledge economy",3),
                    rep("diversity / values / outcomes",5),
                    rep("metropolitan / 'big-city'",2)),
  jcolour = c(rep("navyblue",3),
                    rep("firebrick4",5),
                    rep("darkgreen",2))
)


# scale the variables to better judge relative strength of effects
df_scaled <- df |> 
  st_drop_geometry() |> 
  select(degree_educated,
    professionals,
    younger_adults,
    english_speaking,
    single_ethnicity_household,
    health_not_good,
    white,
    christian,
    own_home,
    no_car) |> 
  scale() |> 
  as.data.frame() |> 
  mutate(con_swing=df$con_swing,
         county=df$county)


df_scaled_sf <- df_scaled |> 
  mutate(constituency_name = df$constituency_name, 
         geometry = df$geometry) |> 
  st_as_sf()

```


## Nested Models

### Nested model 1

```{r}

df <- readRDS("/Users/kevinhoran/Library/CloudStorage/OneDrive-MaynoothUniversity/swing_project/data/df.rds") |> 
  mutate(degree_educated = degree,
         professionals = industry_professional,
         younger_adults = age_18_to_19 + age_20_to_24 + age_25_to_29 + age_30_to_44,
         english_speaking = english_all,
         single_ethnicity_household = 100 - ethnicity_mixed,
         health_not_good = health_fair + health_bad + health_very_bad,
         deprived = deprived_1 + deprived_2 + deprived_3,
         white = ethnicity_white,
         christian = christian,
         own_home = house_owned,
         no_car = cars_none,
         density = density,
         region = as.character(region),
         region = factor(ifelse(county == "Merseyside", "Merseyside", region)),
         region = factor(region)) |> 
  st_as_sf() |> 
  st_transform(crs=27700)


regions <- df |> group_by(region) |> 
  summarise() |> 
  st_as_sf() |> 
  st_transform(crs=27700)

df_nested <- df_scaled |> 
  mutate(region = df$region)
mod_nested <- lmer(con_swing ~
                     degree_educated +
                     younger_adults +
                     health_not_good +
                     white +
                     (1+degree_educated+younger_adults+health_not_good+white|region:county) +
                     (1+degree_educated+younger_adults+health_not_good+white|region),
                   df_nested, REML = TRUE)
summary(mod_nested)

print(VarCorr(mod_nested), comp="Variance", digits=3)

# get rand and fixed effects

ran_regcounty <- ranef(mod_nested)$`region:county` |> 
  rownames_to_column() |> 
  separate(rowname, c("region","county"),":")

ran_reg <- ranef(mod_nested)$region |> 
  rownames_to_column() |> 
  rename(region = rowname)

fix_nested <- fixef(mod_nested) |> 
  data.frame() |> 
  rownames_to_column() |> 
  rename(variable = rowname)

```


### Dot plots

```{r, fig.width=12, fig.height=12}

library(lattice)

randoms <- ranef(mod_nested)
dotplot(randoms)

```


### Random effect lines: region

```{r, fig.width=12, fig.height=3}


region_random_slope <- function(x) {
  ggplot() + 
    geom_abline(data=ran_reg,aes(intercept=`(Intercept)`,slope={{x}}, colour=region), linewidth=1) + 
    scale_colour_brewer(palette = "Paired") + 
    geom_hline(yintercept = 0, colour="black", linewidth=2) + 
    geom_vline(xintercept = 0, colour="black", linewidth=2) + 
    scale_x_continuous(expand = c(0, 0), limits=c(0,4)) + 
    scale_y_continuous(expand = c(0, 0), limits=c(-4,4)) +
    labs(x=deparse(substitute(x)),
         y="intercept",
         title="Region level",
         subtitle="random effects") +
    theme_bw()
}

ggarrange(
  region_random_slope(degree_educated),
  region_random_slope(younger_adults),
  region_random_slope(health_not_good),
  region_random_slope(white),
  nrow = 1,
  ncol = 4,
  common.legend = TRUE, 
  legend = "right"
)
  

```


### Random effect lines: county within region

```{r, fig.width=12, fig.height=6}


county_random_slope <- function(x) {
  ran_regcounty <- ran_regcounty |> 
    mutate(posneg = ifelse({{x}}>0, "pos","neg"))
  ggplot(ran_regcounty) + 
    geom_abline(aes(intercept=`(Intercept)`,slope={{x}}, colour=posneg), linewidth=1) + 
    scale_colour_manual(values = c("darkred","darkblue")) + 
    geom_hline(yintercept = 0, colour="black", linewidth=2) + 
    geom_vline(xintercept = 0, colour="black", linewidth=2) + 
    scale_x_continuous(expand = c(0, 0), limits=c(0,4)) + 
    scale_y_continuous(expand = c(0, 0), limits=c(-4,4)) +
   labs(x=deparse(substitute(x)),
         y="intercept",
         title="Within region, county level random effects") +
    theme_bw() + 
    facet_wrap(~region)
}

county_random_slope(degree_educated)
county_random_slope(younger_adults)
county_random_slope(health_not_good)
county_random_slope(white)


  

```

#### Region random effects

```{r, fig.width=10, fig.height=8}

ran_reg_sf <- ran_reg |> 
  left_join(regions, by="region") |> 
  rename(intercept = `(Intercept)`) |> 
  st_as_sf()

region_random_map <- function(x) {
  ggplot(ran_reg_sf) + 
  geom_sf(aes(fill={{x}})) +
  geom_sf(data=regions, fill=NA, linewidth=0.5, colour="black") + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(subtitle = deparse(substitute(x))) + 
  theme_bw() + 
  theme(legend.position = "bottom")
}

pre_squarer <- ggarrange(region_random_map(degree_educated),
                         region_random_map(younger_adults),
                         region_random_map(health_not_good),
                         region_random_map(white),
                         nrow = 2, ncol = 2)

random_lmer <- ggarrange(region_random_map(intercept),
                        pre_squarer,nrow = 1, ncol = 2, widths = c(1,1.3))

random_lmer

```

#### Region:county + region random effects

```{r, fig.width=10, fig.height=8}

# marge the two tables of random eff levels into one df
re_df <- ran_regcounty |> 
  left_join(ran_reg,
            by = "region") 
re_df$intercept <- re_df[,3]+re_df[,8]
re_df$degree_educated <- re_df[,4]+re_df[,9]
re_df$younger_adults <- re_df[,5]+re_df[,10]
re_df$health_not_good <- re_df[,6]+re_df[,11]
re_df$white <- re_df[,7]+re_df[,12] 
re_df1 <- re_df |>
  select(1,2,13:17) |> 
  left_join(counties, by="county") |> 
  st_as_sf()

regpluscounty_random_map <- function(x) {
  ggplot() + 
  geom_sf(data=re_df1, aes(fill={{x}})) + 
  geom_sf(data=regions, fill=NA, linewidth=0.5, colour="black") + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(subtitle = deparse(substitute(x))) + 
  theme_bw() + 
  theme(legend.position = "bottom")
}

pre_squarer <- ggarrange(regpluscounty_random_map(degree_educated),
                         regpluscounty_random_map(younger_adults),
                         regpluscounty_random_map(health_not_good),
                         regpluscounty_random_map(white),
                         nrow = 2, ncol = 2)

regpluscounty_lmer <- ggarrange(regpluscounty_random_map(intercept),
                        pre_squarer,nrow = 1, ncol = 2, widths = c(1,1.3))

regpluscounty_lmer

```

#### Total effects

```{r, fig.width=10, fig.height=8}

tot_eff <- re_df1 |> 
  mutate(f_intercept = rep(fix_nested[1,2], nrow(re_df1)),
         f_degree_educated = rep(fix_nested[2,2], nrow(re_df1)),
         f_younger_adults = rep(fix_nested[3,2], nrow(re_df1)),
         f_health_not_good = rep(fix_nested[4,2], nrow(re_df1)),
         f_white = rep(fix_nested[5,2], nrow(re_df1)),
         intercept = intercept+f_intercept,
         degree_educated = degree_educated+f_degree_educated,
         younger_adults = younger_adults+f_younger_adults,
         health_not_good = health_not_good+f_health_not_good,
         white = white+f_white)

totaleffect_map <- function(x) {
  ggplot() + 
  geom_sf(data=tot_eff, aes(fill={{x}})) + 
  geom_sf(data=regions, fill=NA, linewidth=0.5, colour="black") + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(subtitle = deparse(substitute(x))) + 
  theme_bw() + 
  theme(legend.position = "bottom")
}

pre_squarer <- ggarrange(totaleffect_map(degree_educated),
                         totaleffect_map(younger_adults),
                         totaleffect_map(health_not_good),
                         totaleffect_map(white),
                         nrow = 2, ncol = 2)

tot_lmer <- ggarrange(totaleffect_map(intercept),
                        pre_squarer,nrow = 1, ncol = 2, widths = c(1,1.3))

tot_lmer

```

#### Check model assumptions

```{r, fig.width=12, fig.height=12}

performance::check_model(mod_nested)

```

#### Moran's-I residuals

```{r, fig.width=12, fig.height=8}

df_nb <- poly2nb(df)
df_wts <- nb2listw(df_nb, zero.policy = TRUE)

temp_mod <- df |> 
  select(con_swing,constituency_name, con_swing) |> 
  mutate(resids = resid(mod_nested) |> as.numeric())

mp <- moran.plot(temp_mod$resids, df_wts, zero.policy = TRUE, labels = temp_mod$constituency_name, plot=FALSE) |> 
  mutate(region=df$region,
         con_swing = df$con_swing)

temp_reg <- lm(wx~x,mp)

xname <- attr(mp, "xname")

ggplot(mp, aes(x=x, y=wx)) + geom_point(shape=1) + 
  geom_smooth(formula=y ~ x, method="lm", se = FALSE) + 
  geom_hline(yintercept=mean(mp$wx), lty=2) + 
  geom_vline(xintercept=mean(mp$x), lty=2) + 
  theme_minimal() + 
  geom_point(data=mp[mp$is_inf,], aes(x=x, y=wx), shape=9) +
  geom_label(data=mp[mp$is_inf,], aes(x=x, y=wx, label=labels, fill=con_swing, colour=con_swing), size=3) +
  xlab("Residuals") + 
  ylab(paste0("Spatially lagged Residuals")) +
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  scale_colour_gradient2(low="black",mid="black",high="white",midpoint = 2) + 
  guides(colour="none") + 
  labs(title = "mod_nested",
       subtitle = paste0("Slope = ",round(temp_reg$coefficients[2],2)),
       fill = "swing") + 
  theme(legend.position = "bottom")

```

#### ICC

```{r}

bt <- broom::tidy(mod_nested) |> 
  filter(str_detect(term,"sd.*")) |> 
  mutate(variance = estimate^2) |> 
  group_by(group) |> 
  summarise(level_variance = sum(variance)) |> 
  ungroup() |> 
  mutate(tot_variance = sum(level_variance),
         level_pc_variance = 100*level_variance/tot_variance,
         cum_var = cumsum(level_pc_variance))

kbl(bt, caption="ICC") |> 
  kable_classic(full_width = F, html_font = "Cambria") |> 
  column_spec(5, background = "#F5E4E6")

```





### Nested model 2: NLME corexp

```{r}

## nlme models with spatial autocorrelation

## first make df with X and Y coords, and crs 27700
centroids <- 
  df |> st_transform(crs=27700) |> st_centroid() |> st_coordinates() |> 
  cbind(df |> st_drop_geometry() |> select(constituency_name))
  
nlme_df <- df_nested |> 
  mutate(constituency_name = df$constituency_name) |> 
  left_join(centroids, by="constituency_name")

mod_nested_corexp <- 
  lme(fixed = con_swing ~
        degree_educated +
        younger_adults +
        health_not_good +
        white,
      correlation = corExp(form = ~X+Y),
      random = list(region = pdDiag(
        ~1+degree_educated+younger_adults+health_not_good+white),
        county = pdDiag(
        ~1+degree_educated+younger_adults+health_not_good+white)),
      data=nlme_df, method = "REML")

summary(mod_nested_corexp)

# get rand and fixed effects
rrr<-ranef(mod_nested_corexp)
rrr$region |> data.frame()

ran_regcounty_corexp <- ranef(mod_nested_corexp)$county |> 
  rownames_to_column() |> 
  separate(rowname, c("region","county"),"/")

ran_reg_corexp <- ranef(mod_nested_corexp)$region |> 
  rownames_to_column() |> 
  rename(region = rowname)

fix_nested_corexp <- fixef(mod_nested_corexp) |> 
  data.frame() |> 
  rownames_to_column() |> 
  rename(variable = rowname)


```



### Random effect lines: region

```{r, fig.width=12, fig.height=3}


region_random_slope <- function(x) {
  ggplot() + 
    geom_abline(data=ran_reg_corexp,aes(intercept=`(Intercept)`,slope={{x}}, colour=region), linewidth=1) + 
    scale_colour_brewer(palette = "Paired") + 
    geom_hline(yintercept = 0, colour="black", linewidth=2) + 
    geom_vline(xintercept = 0, colour="black", linewidth=2) + 
    scale_x_continuous(expand = c(0, 0), limits=c(0,4)) + 
    scale_y_continuous(expand = c(0, 0), limits=c(-4,4)) +
    labs(x=deparse(substitute(x)),
         y="intercept",
         title="Region level",
         subtitle="random effects") +
    theme_bw()
}

ggarrange(
  region_random_slope(degree_educated),
  region_random_slope(younger_adults),
  region_random_slope(health_not_good),
  region_random_slope(white),
  nrow = 1,
  ncol = 4,
  common.legend = TRUE, 
  legend = "right"
)
  

```


### Random effect lines: county within region

```{r, fig.width=12, fig.height=6}


county_random_slope <- function(x) {
  ran_regcounty_corexp <- ran_regcounty_corexp |> 
    mutate(posneg = ifelse({{x}}>0, "pos","neg"))
  ggplot(ran_regcounty_corexp) + 
    geom_abline(aes(intercept=`(Intercept)`,slope={{x}}, colour=posneg), linewidth=1) + 
    scale_colour_manual(values = c("darkred","darkblue")) + 
    geom_hline(yintercept = 0, colour="black", linewidth=2) + 
    geom_vline(xintercept = 0, colour="black", linewidth=2) + 
    scale_x_continuous(expand = c(0, 0), limits=c(0,4)) + 
    scale_y_continuous(expand = c(0, 0), limits=c(-4,4)) +
   labs(x=deparse(substitute(x)),
         y="intercept",
         title="Within region, county level random effects") +
    theme_bw() + 
    facet_wrap(~region)
}

county_random_slope(degree_educated)
county_random_slope(younger_adults)
county_random_slope(health_not_good)
county_random_slope(white)


  

```

#### Region random effects

```{r, fig.width=10, fig.height=8}

ran_reg_corexp_sf <- ran_reg_corexp |> 
  left_join(regions, by="region") |> 
  rename(intercept = `(Intercept)`) |> 
  st_as_sf()

region_random_map <- function(x) {
  ggplot(ran_reg_corexp_sf) + 
  geom_sf(aes(fill={{x}})) +
  geom_sf(data=regions, fill=NA, linewidth=0.5, colour="black") + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(subtitle = deparse(substitute(x))) + 
  theme_bw() + 
  theme(legend.position = "bottom")
}

pre_squarer <- ggarrange(region_random_map(degree_educated),
                         region_random_map(younger_adults),
                         region_random_map(health_not_good),
                         region_random_map(white),
                         nrow = 2, ncol = 2)

random_corexp <- ggarrange(region_random_map(intercept),
                        pre_squarer,nrow = 1, ncol = 2, widths = c(1,1.3))

random_corexp


```


#### Region:county + region random effects

```{r, fig.width=10, fig.height=8}

# marge the two tables of random eff levels into one df
re_df <- ran_regcounty_corexp |> 
  left_join(ran_reg_corexp,
            by = "region") 
re_df$intercept <- re_df[,3]+re_df[,8]
re_df$degree_educated <- re_df[,4]+re_df[,9]
re_df$younger_adults <- re_df[,5]+re_df[,10]
re_df$health_not_good <- re_df[,6]+re_df[,11]
re_df$white <- re_df[,7]+re_df[,12] 
re_df1 <- re_df |>
  select(1,2,13:17) |> 
  left_join(counties, by="county") |> 
  st_as_sf()

regpluscounty_random_map <- function(x) {
  ggplot() + 
  geom_sf(data=re_df1, aes(fill={{x}})) + 
  geom_sf(data=regions, fill=NA, linewidth=0.5, colour="black") + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(subtitle = deparse(substitute(x))) + 
  theme_bw() + 
  theme(legend.position = "bottom")
}

pre_squarer <- ggarrange(regpluscounty_random_map(degree_educated),
                         regpluscounty_random_map(younger_adults),
                         regpluscounty_random_map(health_not_good),
                         regpluscounty_random_map(white),
                         nrow = 2, ncol = 2)

regpluscounty_corexp <- ggarrange(regpluscounty_random_map(intercept),
                        pre_squarer,nrow = 1, ncol = 2, widths = c(1,1.3))

regpluscounty_corexp

```

#### Total effects

```{r, fig.width=10, fig.height=8}

tot_eff <- re_df1 |> 
  mutate(f_intercept = rep(fix_nested[1,2], nrow(re_df1)),
         f_degree_educated = rep(fix_nested[2,2], nrow(re_df1)),
         f_younger_adults = rep(fix_nested[3,2], nrow(re_df1)),
         f_health_not_good = rep(fix_nested[4,2], nrow(re_df1)),
         f_white = rep(fix_nested[5,2], nrow(re_df1)),
         intercept = intercept+f_intercept,
         degree_educated = degree_educated+f_degree_educated,
         younger_adults = younger_adults+f_younger_adults,
         health_not_good = health_not_good+f_health_not_good,
         white = white+f_white)

totaleffect_map <- function(x) {
  ggplot() + 
  geom_sf(data=tot_eff, aes(fill={{x}})) + 
  geom_sf(data=regions, fill=NA, linewidth=0.5, colour="black") + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(subtitle = deparse(substitute(x))) + 
  theme_bw() + 
  theme(legend.position = "bottom")
}

pre_squarer <- ggarrange(totaleffect_map(degree_educated),
                         totaleffect_map(younger_adults),
                         totaleffect_map(health_not_good),
                         totaleffect_map(white),
                         nrow = 2, ncol = 2)

tot_corexp <- ggarrange(totaleffect_map(intercept),
                        pre_squarer,nrow = 1, ncol = 2, widths = c(1,1.3))

tot_corexp

```

#### Check model assumptions

```{r, fig.width=12, fig.height=12}

#performance::check_model(mod_nested_corexp)

```

#### Moran's-I residuals

```{r, fig.width=12, fig.height=8}

df_nb <- poly2nb(df)
df_wts <- nb2listw(df_nb, zero.policy = TRUE)

temp_mod <- df |> 
  select(con_swing,constituency_name, con_swing) |> 
  mutate(resids = resid(mod_nested_corexp) |> as.numeric())

mp <- moran.plot(temp_mod$resids, df_wts, zero.policy = TRUE, labels = temp_mod$constituency_name, plot=FALSE) |> 
  mutate(region=df$region,
         con_swing = df$con_swing)

temp_reg <- lm(wx~x,mp)

xname <- attr(mp, "xname")

ggplot(mp, aes(x=x, y=wx)) + geom_point(shape=1) + 
  geom_smooth(formula=y ~ x, method="lm", se = FALSE) + 
  geom_hline(yintercept=mean(mp$wx), lty=2) + 
  geom_vline(xintercept=mean(mp$x), lty=2) + 
  theme_minimal() + 
  geom_point(data=mp[mp$is_inf,], aes(x=x, y=wx), shape=9) +
  geom_label(data=mp[mp$is_inf,], aes(x=x, y=wx, label=labels, fill=con_swing, colour=con_swing), size=3) +
  xlab("Residuals") + 
  ylab(paste0("Spatially lagged Residuals")) +
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  scale_colour_gradient2(low="black",mid="black",high="white",midpoint = 2) + 
  guides(colour="none") + 
  labs(title = "mod_nested",
       subtitle = paste0("Slope = ",round(temp_reg$coefficients[2],2)),
       fill = "swing") + 
  theme(legend.position = "bottom")

```



### 2 models region random side by side

```{r, fig.width=10, fig.height=8}

random_lmer
random_corexp

```

### 2 models region plus county rand eff side by side

```{r, fig.width=10, fig.height=8}

regpluscounty_lmer
regpluscounty_corexp

```


### 2 models total eff side by side: random + fixed

```{r, fig.width=10, fig.height=8}

tot_lmer
tot_corexp

```

### LRT

```{r}

lrtest(mod_nested,mod_nested_corexp)

```








## Nested model 3:  using clusters

```{r}

df_clus <- readRDS("df_clus.rds")

df <- readRDS("/Users/kevinhoran/Library/CloudStorage/OneDrive-MaynoothUniversity/swing_project/data/df.rds") |> 
  mutate(degree_educated = degree,
         professionals = industry_professional,
         younger_adults = age_18_to_19 + age_20_to_24 + age_25_to_29 + age_30_to_44,
         english_speaking = english_all,
         single_ethnicity_household = 100 - ethnicity_mixed,
         health_not_good = health_fair + health_bad + health_very_bad,
         deprived = deprived_1 + deprived_2 + deprived_3,
         white = ethnicity_white,
         christian = christian,
         own_home = house_owned,
         no_car = cars_none,
         density = density,
         region = as.character(region),
         region = factor(ifelse(county == "Merseyside", "Merseyside", region)),
         region = factor(region)) |> 
  st_as_sf() |> 
  st_transform(crs=27700)




df_nested <- df_scaled |> 
  mutate(region = df$region) |> 
  left_join(df_clus, by="county")

clusters <- df_nested |> st_as_sf() |> 
  group_by(clus) |> 
  summarise() |> 
  st_as_sf() |> 
  st_transform(crs=27700)

mod_nested <- lmer(con_swing ~
                     degree_educated +
                     younger_adults +
                     health_not_good +
                     white +
                     (1+degree_educated+younger_adults+health_not_good+white|clus:county) +
                     (1+degree_educated+younger_adults+health_not_good+white|clus),
                   df_nested, REML = TRUE)
summary(mod_nested)


print(VarCorr(mod_nested), comp="Variance", digits=3)

# get rand and fixed effects

ran_regcounty <- ranef(mod_nested)$`clus:county` |> 
  rownames_to_column() |> 
  separate(rowname, c("clus","county"),":")

ran_reg <- ranef(mod_nested)$clus |> 
  rownames_to_column() |> 
  rename(clus = rowname)

fix_nested <- fixef(mod_nested) |> 
  data.frame() |> 
  rownames_to_column() |> 
  rename(variable = rowname)

```



### Random effect lines: region

```{r, fig.width=12, fig.height=3}


cluster_random_slope <- function(x) {
  ggplot() + 
    geom_abline(data=ran_reg,aes(intercept=`(Intercept)`,slope={{x}}, colour=clus), linewidth=1) + 
    scale_colour_brewer(palette = "Paired") + 
    geom_hline(yintercept = 0, colour="black", linewidth=2) + 
    geom_vline(xintercept = 0, colour="black", linewidth=2) + 
    scale_x_continuous(expand = c(0, 0), limits=c(0,4)) + 
    scale_y_continuous(expand = c(0, 0), limits=c(-4,4)) +
    labs(x=deparse(substitute(x)),
         y="intercept",
         title="Cluster level",
         subtitle="random effects") +
    theme_bw()
}

ggarrange(
  cluster_random_slope(degree_educated),
  cluster_random_slope(younger_adults),
  cluster_random_slope(health_not_good),
  cluster_random_slope(white),
  nrow = 1,
  ncol = 4,
  common.legend = TRUE, 
  legend = "right"
)
  

```


### Random effect lines: county within region

```{r, fig.width=12, fig.height=6}


county_random_slope <- function(x) {
  ran_regcounty <- ran_regcounty |> 
    mutate(posneg = ifelse({{x}}>0, "pos","neg"))
  ggplot(ran_regcounty) + 
    geom_abline(aes(intercept=`(Intercept)`,slope={{x}}, colour=posneg), linewidth=1) + 
    scale_colour_manual(values = c("darkred","darkblue")) + 
    geom_hline(yintercept = 0, colour="black", linewidth=2) + 
    geom_vline(xintercept = 0, colour="black", linewidth=2) + 
    scale_x_continuous(expand = c(0, 0), limits=c(0,4)) + 
    scale_y_continuous(expand = c(0, 0), limits=c(-4,4)) +
   labs(x=deparse(substitute(x)),
         y="intercept",
         title="Within cluster, county level random effects") +
    theme_bw() + 
    facet_wrap(~clus)
}

county_random_slope(degree_educated)
county_random_slope(younger_adults)
county_random_slope(health_not_good)
county_random_slope(white)


  

```


#### Region random effects

```{r, fig.width=18, fig.height=8}

ran_reg_sf <- ran_reg |> 
  left_join(clusters, by="clus") |> 
  rename(intercept = `(Intercept)`) |> 
  st_as_sf()

cluster_random_map <- function(x) {
  ggplot(ran_reg_sf) + 
  geom_sf(aes(fill={{x}})) +
  geom_sf(data=clusters, fill=NA, linewidth=0.5, colour="black") + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(subtitle = deparse(substitute(x))) + 
  theme_bw() + 
  theme(legend.position = "bottom")
}

pre_squarer <- ggarrange(cluster_random_map(degree_educated),
                         cluster_random_map(younger_adults),
                         cluster_random_map(health_not_good),
                         cluster_random_map(white),
                         nrow = 2, ncol = 2)

random_lmer <- ggarrange(cluster_random_map(intercept),
                        pre_squarer,nrow = 1, ncol = 2, widths = c(1,1.3))

random_lmer

```

#### Region:county + region random effects

```{r, fig.width=10, fig.height=8}

# marge the two tables of random eff levels into one df
re_df <- ran_regcounty |> 
  left_join(ran_reg,
            by = "clus") 
re_df$intercept <- re_df[,3]+re_df[,8]
re_df$degree_educated <- re_df[,4]+re_df[,9]
re_df$younger_adults <- re_df[,5]+re_df[,10]
re_df$health_not_good <- re_df[,6]+re_df[,11]
re_df$white <- re_df[,7]+re_df[,12] 
re_df1 <- re_df |>
  select(1,2,13:17) |> 
  left_join(counties, by="county") |> 
  st_as_sf()

regpluscounty_random_map <- function(x) {
  ggplot() + 
  geom_sf(data=re_df1, aes(fill={{x}})) + 
  geom_sf(data=clusters, fill=NA, linewidth=0.5, colour="black") + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(subtitle = deparse(substitute(x))) + 
  theme_bw() + 
  theme(legend.position = "bottom")
}

pre_squarer <- ggarrange(regpluscounty_random_map(degree_educated),
                         regpluscounty_random_map(younger_adults),
                         regpluscounty_random_map(health_not_good),
                         regpluscounty_random_map(white),
                         nrow = 2, ncol = 2)

regpluscounty_lmer <- ggarrange(regpluscounty_random_map(intercept),
                        pre_squarer,nrow = 1, ncol = 2, widths = c(1,1.3))

regpluscounty_lmer

```

#### Total effects

```{r, fig.width=10, fig.height=8}

tot_eff <- re_df1 |> 
  mutate(f_intercept = rep(fix_nested[1,2], nrow(re_df1)),
         f_degree_educated = rep(fix_nested[2,2], nrow(re_df1)),
         f_younger_adults = rep(fix_nested[3,2], nrow(re_df1)),
         f_health_not_good = rep(fix_nested[4,2], nrow(re_df1)),
         f_white = rep(fix_nested[5,2], nrow(re_df1)),
         intercept = intercept+f_intercept,
         degree_educated = degree_educated+f_degree_educated,
         younger_adults = younger_adults+f_younger_adults,
         health_not_good = health_not_good+f_health_not_good,
         white = white+f_white)

totaleffect_map <- function(x) {
  ggplot() + 
  geom_sf(data=tot_eff, aes(fill={{x}})) + 
  geom_sf(data=clusters, fill=NA, linewidth=0.5, colour="black") + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(subtitle = deparse(substitute(x))) + 
  theme_bw() + 
  theme(legend.position = "bottom")
}

pre_squarer <- ggarrange(totaleffect_map(degree_educated),
                         totaleffect_map(younger_adults),
                         totaleffect_map(health_not_good),
                         totaleffect_map(white),
                         nrow = 2, ncol = 2)

tot_lmer <- ggarrange(totaleffect_map(intercept),
                        pre_squarer,nrow = 1, ncol = 2, widths = c(1,1.3))

tot_lmer

```

#### ICC

```{r}

bt <- broom::tidy(mod_nested) |> 
  filter(str_detect(term,"sd.*")) |> 
  mutate(variance = estimate^2) |> 
  group_by(group) |> 
  summarise(level_variance = sum(variance)) |> 
  ungroup() |> 
  mutate(tot_variance = sum(level_variance),
         level_pc_variance = 100*level_variance/tot_variance,
         cum_var = cumsum(level_pc_variance))

kbl(bt, caption="ICC") |> 
  kable_classic(full_width = F, html_font = "Cambria") |> 
  column_spec(5, background = "#F5E4E6")

```


## Nested model 4:  using clusters corexp


```{r}

df <- readRDS("/Users/kevinhoran/Library/CloudStorage/OneDrive-MaynoothUniversity/swing_project/data/df.rds") |> 
  mutate(degree_educated = degree,
         professionals = industry_professional,
         younger_adults = age_18_to_19 + age_20_to_24 + age_25_to_29 + age_30_to_44,
         english_speaking = english_all,
         single_ethnicity_household = 100 - ethnicity_mixed,
         health_not_good = health_fair + health_bad + health_very_bad,
         deprived = deprived_1 + deprived_2 + deprived_3,
         white = ethnicity_white,
         christian = christian,
         own_home = house_owned,
         no_car = cars_none,
         density = density,
         region = as.character(region),
         region = factor(ifelse(county == "Merseyside", "Merseyside", region)),
         region = factor(region)) |> 
  st_as_sf() |> 
  st_transform(crs=27700)




df_nested <- df_scaled |> 
  left_join(df_clus, by="county")

centroids <- 
  df |> st_transform(crs=27700) |> st_centroid() |> st_coordinates() |> 
  cbind(df |> st_drop_geometry() |> select(constituency_name))
  
nlme_df <- df_nested |> 
  mutate(constituency_name = df$constituency_name) |> 
  left_join(centroids, by="constituency_name")

mod_nested_corexp <- 
  lme(fixed = con_swing ~
        degree_educated +
        younger_adults +
        health_not_good +
        white,
      correlation = corExp(form = ~X+Y),
      random = list(clus = pdDiag(
        ~1+degree_educated+younger_adults+health_not_good+white),
        county = pdDiag(
        ~1+degree_educated+younger_adults+health_not_good+white)),
      data=nlme_df, method = "REML")



summary(mod_nested_corexp)


print(VarCorr(mod_nested_corexp), comp="Variance", digits=3)

# get rand and fixed effects

# get rand and fixed effects
rrr<-ranef(mod_nested_corexp)
rrr$clus |> data.frame()

ran_cluscounty_corexp <- ranef(mod_nested_corexp)$county |> 
  rownames_to_column() |> 
  separate(rowname, c("clus","county"),"/")

ran_reg_corexp <- ranef(mod_nested_corexp)$clus |> 
  rownames_to_column() |> 
  rename(clus = rowname)

fix_nested_corexp <- fixef(mod_nested_corexp) |> 
  data.frame() |> 
  rownames_to_column() |> 
  rename(variable = rowname)

```



### Random effect lines: region

```{r, fig.width=12, fig.height=3}


cluster_random_slope <- function(x) {
  ggplot() + 
    geom_abline(data=ran_reg_corexp,aes(intercept=`(Intercept)`,slope={{x}}, colour=clus), linewidth=1) + 
    scale_colour_brewer(palette = "Paired") + 
    geom_hline(yintercept = 0, colour="black", linewidth=2) + 
    geom_vline(xintercept = 0, colour="black", linewidth=2) + 
    scale_x_continuous(expand = c(0, 0), limits=c(0,4)) + 
    scale_y_continuous(expand = c(0, 0), limits=c(-4,4)) +
    labs(x=deparse(substitute(x)),
         y="intercept",
         title="Cluster level",
         subtitle="random effects") +
    theme_bw()
}

ggarrange(
  cluster_random_slope(degree_educated),
  cluster_random_slope(younger_adults),
  cluster_random_slope(health_not_good),
  cluster_random_slope(white),
  nrow = 1,
  ncol = 4,
  common.legend = TRUE, 
  legend = "right"
)
  

```


### Random effect lines: county within region

```{r, fig.width=12, fig.height=6}


county_random_slope <- function(x) {
  ran_cluscounty_corexp <- ran_cluscounty_corexp |> 
    mutate(posneg = ifelse({{x}}>0, "pos","neg"))
  ggplot(ran_cluscounty_corexp) + 
    geom_abline(aes(intercept=`(Intercept)`,slope={{x}}, colour=posneg), linewidth=1) + 
    scale_colour_manual(values = c("darkred","darkblue")) + 
    geom_hline(yintercept = 0, colour="black", linewidth=2) + 
    geom_vline(xintercept = 0, colour="black", linewidth=2) + 
    scale_x_continuous(expand = c(0, 0), limits=c(0,4)) + 
    scale_y_continuous(expand = c(0, 0), limits=c(-4,4)) +
   labs(x=deparse(substitute(x)),
         y="intercept",
         title="Within cluster, county level random effects") +
    theme_bw() + 
    facet_wrap(~clus)
}

county_random_slope(degree_educated)
county_random_slope(younger_adults)
county_random_slope(health_not_good)
county_random_slope(white)


  

```


#### Region random effects

```{r, fig.width=18, fig.height=8}

ran_reg_corexp_sf <- ran_reg_corexp |> 
  left_join(clusters, by="clus") |> 
  rename(intercept = `(Intercept)`) |> 
  st_as_sf()

region_random_map <- function(x) {
  ggplot(ran_reg_corexp_sf) + 
  geom_sf(aes(fill={{x}})) +
  geom_sf(data=regions, fill=NA, linewidth=0.5, colour="black") + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(subtitle = deparse(substitute(x))) + 
  theme_bw() + 
  theme(legend.position = "bottom")
}

pre_squarer <- ggarrange(region_random_map(degree_educated),
                         region_random_map(younger_adults),
                         region_random_map(health_not_good),
                         region_random_map(white),
                         nrow = 2, ncol = 2)

random_corexp <- ggarrange(region_random_map(intercept),
                        pre_squarer,nrow = 1, ncol = 2, widths = c(1,1.3))

random_corexp


```

#### Region:county + region random effects

```{r, fig.width=10, fig.height=8}

# marge the two tables of random eff levels into one df
re_df <- ran_cluscounty_corexp |> 
  left_join(ran_reg_corexp,
            by = "clus") 
re_df$intercept <- re_df[,3]+re_df[,8]
re_df$degree_educated <- re_df[,4]+re_df[,9]
re_df$younger_adults <- re_df[,5]+re_df[,10]
re_df$health_not_good <- re_df[,6]+re_df[,11]
re_df$white <- re_df[,7]+re_df[,12] 
re_df1 <- re_df |>
  select(1,2,13:17) |> 
  left_join(counties, by="county") |> 
  st_as_sf()

regpluscounty_random_map <- function(x) {
  ggplot() + 
  geom_sf(data=re_df1, aes(fill={{x}})) + 
  geom_sf(data=regions, fill=NA, linewidth=0.5, colour="black") + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(subtitle = deparse(substitute(x))) + 
  theme_bw() + 
  theme(legend.position = "bottom")
}

pre_squarer <- ggarrange(regpluscounty_random_map(degree_educated),
                         regpluscounty_random_map(younger_adults),
                         regpluscounty_random_map(health_not_good),
                         regpluscounty_random_map(white),
                         nrow = 2, ncol = 2)

regpluscounty_corexp <- ggarrange(regpluscounty_random_map(intercept),
                        pre_squarer,nrow = 1, ncol = 2, widths = c(1,1.3))

regpluscounty_corexp

```

#### Total effects

```{r, fig.width=10, fig.height=8}

tot_eff <- re_df1 |> 
  mutate(f_intercept = rep(fix_nested[1,2], nrow(re_df1)),
         f_degree_educated = rep(fix_nested[2,2], nrow(re_df1)),
         f_younger_adults = rep(fix_nested[3,2], nrow(re_df1)),
         f_health_not_good = rep(fix_nested[4,2], nrow(re_df1)),
         f_white = rep(fix_nested[5,2], nrow(re_df1)),
         intercept = intercept+f_intercept,
         degree_educated = degree_educated+f_degree_educated,
         younger_adults = younger_adults+f_younger_adults,
         health_not_good = health_not_good+f_health_not_good,
         white = white+f_white)

totaleffect_map <- function(x) {
  ggplot() + 
  geom_sf(data=tot_eff, aes(fill={{x}})) + 
  geom_sf(data=regions, fill=NA, linewidth=0.5, colour="black") + 
  scale_fill_gradient2(low="darkred",mid="white",high="darkblue",midpoint = 0) + 
  labs(subtitle = deparse(substitute(x))) + 
  theme_bw() + 
  theme(legend.position = "bottom")
}

pre_squarer <- ggarrange(totaleffect_map(degree_educated),
                         totaleffect_map(younger_adults),
                         totaleffect_map(health_not_good),
                         totaleffect_map(white),
                         nrow = 2, ncol = 2)

tot_corexp <- ggarrange(totaleffect_map(intercept),
                        pre_squarer,nrow = 1, ncol = 2, widths = c(1,1.3))

tot_corexp


```


### 2 models region random side by side

```{r, fig.width=10, fig.height=8}

random_lmer
random_corexp

```


### 2 models region plus county rand eff side by side

```{r, fig.width=10, fig.height=8}

regpluscounty_lmer
regpluscounty_corexp

```


### 2 models total eff side by side: random + fixed

```{r, fig.width=10, fig.height=8}

tot_lmer
tot_corexp

```


#### LRT

```{r}

lrtest(mod_nested,mod_nested_corexp)

```














